<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker</title>
    <url>/posts/c018.html</url>
    <content><![CDATA[<h1 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h1><span id="more"></span>

<h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>​		2010年，几个搞IT的年轻人，在美国旧金山成立了一家名叫“dotCloud”的公司。这家公司主要提供基于PaaS的云计算技术服务。具体来说，是和LXC有关的容器技术。LXC，就是Linux容器虚拟技术（Linux container）后来，dotCloud公司将自己的容器技术进行了简化和标准化，并命名为——<strong>Docker</strong>。</p>
<p>​		Docker技术诞生之后，并没有引起行业的关注。而dotCloud公司，作为一家小型创业企业，在激烈的竞争之下，也步履维艰。正当他们快要坚持不下去的时候，脑子里蹦出了“开源”的想法。什么是“开源”？开源，就是开放源代码。也就是将原来内部保密的程序源代码开放给所有人，然后让大家一起参与进来，贡献代码和意见。Open Source，开源有的软件是一开始就开源的。也有的软件，是混不下去，创造者又不想放弃，所以选择开源。</p>
<p>​		2013年3月，dotCloud公司的创始人之一，Docker之父，28岁的<strong>Solomon Hykes</strong>正式决定，将Docker项目开源。Solomon Hykes（今年刚从Docker离职）不开则已，一开惊人。越来越多的IT工程师发现了Docker的优点，然后蜂拥而至，加入Docker开源社区。Docker的人气迅速攀升，速度之快，令人瞠目结舌。开源当月，Docker 0.1 版本发布。此后的每一个月，Docker都会发布一个版本。到2014年6月9日，Docker 1.0 版本正式发布。此时的Docker，已经成为行业里人气最火爆的开源技术，没有之一。甚至像Google、微软、Amazon、VMware这样的巨头，都对它青睐有加，表示将全力支持。Docker火了之后，dotCloud公司干脆把公司名字也改成了Docker Inc. 。</p>
<p>参考连接:</p>
<ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/105331409">Docker的历史与发展 - 知乎 (zhihu.com)</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/53260098">10分钟看懂Docker和K8S - 知乎 (zhihu.com)</a></p>
</li>
</ul>
<hr>
<p><img data-src="/posts/c018/image-20221022094423443.png" alt="image-20221022094423443"></p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ul>
<li>CentOS系统</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<ul>
<li>Dbantu系统</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<ul>
<li>Debian系统</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="加速器"><a href="#加速器" class="headerlink" title="加速器"></a>加速器</h2><ul>
<li>我的加速地址</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://2mttmns2.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Docker命令"><a href="#Docker命令" class="headerlink" title="Docker命令"></a>Docker命令</h2><h3 id="服务指令"><a href="#服务指令" class="headerlink" title="服务指令"></a>服务指令</h3><ul>
<li>启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<ul>
<li>停止</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>

<ul>
<li>重启</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart docker</span><br></pre></td></tr></table></figure>

<ul>
<li>查看</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">systemctl status docker</span><br></pre></td></tr></table></figure>

<ul>
<li>自启动</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable docker</span><br></pre></td></tr></table></figure>

<h3 id="镜像指令"><a href="#镜像指令" class="headerlink" title="镜像指令"></a>镜像指令</h3><ul>
<li><strong>官方镜像查询网站</strong></li>
</ul>
<blockquote>
<p> <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
</blockquote>
<ul>
<li>查看镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<ul>
<li>查看镜像元数据</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker inspect xxx:tag</span><br></pre></td></tr></table></figure>

<ul>
<li>在镜像仓库搜索</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker search xxx:tag//版本号</span><br></pre></td></tr></table></figure>

<ul>
<li>在镜像仓库下载</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull xxx:tag</span><br></pre></td></tr></table></figure>

<ul>
<li>删除镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rmi xxx:tag</span><br><span class="line">docker rmi ID</span><br><span class="line">//删除单个镜像</span><br><span class="line">docker rmi `docker images -aq`</span><br><span class="line">//删除所有镜像</span><br></pre></td></tr></table></figure>

<ul>
<li>修改镜像名字和版本号</li>
</ul>
<figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line">docker <span class="keyword">tag</span>  <span class="title">xxx</span>:<span class="keyword">tag</span> <span class="title">xxx</span>:<span class="keyword">tag</span></span><br></pre></td></tr></table></figure>

<h3 id="容器指令"><a href="#容器指令" class="headerlink" title="容器指令"></a><strong>容器指令</strong></h3><ul>
<li>查看</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker ps -a -q</span><br><span class="line">//-a查看所有容器，-q仅查看版本号</span><br><span class="line">docker stats </span><br><span class="line">//查看每个容器占的内存</span><br></pre></td></tr></table></figure>

<ul>
<li>运行</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=xxx images:tag [-p xx:xx] /bin/bash</span><br><span class="line">//创建并且进入容器</span><br><span class="line">//-p指主机端口和容器端口的映射</span><br><span class="line">docker run -d --name=xxx images:tag /bin/bash</span><br><span class="line">//创建并且后台运行容器</span><br></pre></td></tr></table></figure>

<ul>
<li>进入</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it xxx /bin/bash</span><br><span class="line">//xxx为容器名字</span><br><span class="line">docker attch xxx</span><br><span class="line">//进入正在运行的容器内部</span><br></pre></td></tr></table></figure>

<ul>
<li>启动</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>停止</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker stop xxx</span><br></pre></td></tr></table></figure>

<ul>
<li>删除</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker rm [-f] xxx</span><br><span class="line">//-f强制删除</span><br><span class="line">docker rm ID</span><br><span class="line">//删除单个容器</span><br><span class="line">docker rm `dcoekr ps -aq`</span><br><span class="line">//删除所有容器</span><br></pre></td></tr></table></figure>

<h3 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h3><ul>
<li>拷贝容器内文件到主机</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp id:内路径 外路径</span><br><span class="line">//容器外运行指令</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Docker数据卷"><a href="#Docker数据卷" class="headerlink" title="Docker数据卷"></a>Docker数据卷</h2><blockquote>
<p>定义：进行容器间，容器与宿机之间的文件共享，避免数据丢失</p>
</blockquote>
<h3 id="指定路径挂载"><a href="#指定路径挂载" class="headerlink" title="指定路径挂载"></a>指定路径挂载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name=xxx -v 本机路径:容器路径</span><br><span class="line">//同步容器内外的数据</span><br></pre></td></tr></table></figure>

<h3 id="具名挂载"><a href="#具名挂载" class="headerlink" title="具名挂载"></a>具名挂载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">dcoekr run -it --name xxx -v 目录名:容器路径</span><br><span class="line">//指定名字，不指定路径，存放在/var/lib/docker/volumes目录下</span><br></pre></td></tr></table></figure>

<h3 id="匿名挂载"><a href="#匿名挂载" class="headerlink" title="匿名挂载"></a>匿名挂载</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name xxx -v 容器路径</span><br><span class="line">//不指定名字和路径，存放在/var/lib/docker/volumes目录下</span><br></pre></td></tr></table></figure>

<h3 id="挂载权限"><a href="#挂载权限" class="headerlink" title="挂载权限"></a>挂载权限</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name xxx -v 容器路径:ro(或者rw)</span><br><span class="line">//ro:readonly</span><br><span class="line">//rw:readwrite</span><br></pre></td></tr></table></figure>

<h3 id="容器数据卷-容器间的数据共享"><a href="#容器数据卷-容器间的数据共享" class="headerlink" title="容器数据卷(容器间的数据共享)"></a>容器数据卷(容器间的数据共享)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --name xxx --volumes-from 被挂载容器 </span><br><span class="line">//子容器和父容器和宿主文件全实现共享，除非删除宿主文件，否则不会彻底删除</span><br></pre></td></tr></table></figure>





<hr>
<h2 id="Dokcerfile文件"><a href="#Dokcerfile文件" class="headerlink" title="Dokcerfile文件"></a>Dokcerfile文件</h2><h3 id="DockerFile基础知识"><a href="#DockerFile基础知识" class="headerlink" title="DockerFile基础知识"></a>DockerFile基础知识</h3><ol>
<li>每个关键字必须大写</li>
<li>#表示注释</li>
<li>从上到下按层构建</li>
</ol>
<h3 id="DockerFile命令"><a href="#DockerFile命令" class="headerlink" title="DockerFile命令"></a>DockerFile命令</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span></span><br><span class="line"><span class="comment"># 基于什么构建的镜像</span></span><br><span class="line"><span class="comment"># scratch</span></span><br><span class="line"><span class="keyword">MAINTAINER</span></span><br><span class="line"><span class="comment"># 作者和邮箱</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># </span></span></span><br><span class="line"><span class="keyword">ENV</span> MYPAT /xxx/xxx/</span><br><span class="line"><span class="comment"># 构建时赋值环境变量</span></span><br><span class="line"><span class="comment"># 比如MYPATH /usr/local</span></span><br><span class="line"><span class="comment"># 之后就可以用$MYPATH来调用所对应的值</span></span><br><span class="line"><span class="comment"># 相当于全局变量或者全局的键值对</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 构建镜像时运行的命令</span></span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> xxx.tar.gz /xxx/xxx/路径</span></span><br><span class="line"><span class="comment"># 添加内容，会自动解压</span></span><br><span class="line"><span class="keyword">COPY</span><span class="language-bash"> file /xxx/xxx/file </span></span><br><span class="line"><span class="comment"># 拷贝文件</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="comment"># 创建容器后进入的第一个目录</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 挂载的目录位置</span></span></span><br><span class="line"><span class="keyword">EXPOSE</span></span><br><span class="line"><span class="comment"># 对外指定端口</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 指定容器运行时运行的命令</span></span></span><br><span class="line"><span class="comment"># 可以追加命令，不被覆盖</span></span><br><span class="line"><span class="comment"># 用--entrypoint覆盖命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;指令&quot;</span>,<span class="string">&quot;参数&quot;</span>]</span></span><br><span class="line"><span class="comment"># 指定容器启动时运行的命令，只有最最后一个可以生效</span></span><br><span class="line"><span class="comment"># 用户指定一个可执行程序, 这个可执行程序在容器启动后自动启动</span></span><br><span class="line"><span class="comment"># 不可以追加命令，追加命令会被覆盖</span></span><br><span class="line"><span class="comment">#docker run xximages ls</span></span><br></pre></td></tr></table></figure>

<ul>
<li>ENTRYPOINT和CMD的区别:<a href="https://zhuanlan.zhihu.com/p/30555962">Dockerfile: ENTRYPOINT和CMD的区别 - 知乎 (zhihu.com)</a></li>
</ul>
<h3 id="DockerFile发布"><a href="#DockerFile发布" class="headerlink" title="DockerFile发布"></a>DockerFile发布</h3><ul>
<li><p>登录dockerhub网站：<a href="https://hub.docker.com/">https://hub.docker.com/</a>,注册dockerhub账号，</p>
</li>
<li><p>服务器上登录dockerfile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker login -u 用户名</span><br><span class="line">Password:</span><br></pre></td></tr></table></figure>
</li>
<li><p>服务器上提交自己的dockerfile</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker push xxx:tag</span><br><span class="line">//带上版本号</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="制作镜像"><a href="#制作镜像" class="headerlink" title="制作镜像"></a>制作镜像</h2><h3 id="commit-制作"><a href="#commit-制作" class="headerlink" title="commit 制作"></a>commit 制作</h3><ul>
<li>运行容器，把操作过的容器打包成新镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit -a=&quot;说明&quot; -m=&quot;作者&quot; 容器ID 目标镜像名字:tag</span><br></pre></td></tr></table></figure>

<h3 id="dockerfile制作"><a href="#dockerfile制作" class="headerlink" title="dockerfile制作"></a>dockerfile制作</h3><ul>
<li>通过执行dockerfile文件脚本自动化制作镜像</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -f dockerfile文件路径 -t 镜像名称 .</span><br><span class="line">//-f指定路径</span><br><span class="line">//-t target 镜像名称</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="Docker网络"><a href="#Docker网络" class="headerlink" title="Docker网络"></a>Docker网络</h2><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title="Docker Compose"></a>Docker Compose</h3><h3 id="Docekr-swarm"><a href="#Docekr-swarm" class="headerlink" title="Docekr swarm"></a>Docekr swarm</h3><h3 id="CI-x2F-CD-jenkins"><a href="#CI-x2F-CD-jenkins" class="headerlink" title="CI&#x2F;CD jenkins"></a>CI&#x2F;CD jenkins</h3>]]></content>
      <categories>
        <category>工具</category>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>容器</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Java学习</title>
    <url>/posts/14da.html</url>
    <content><![CDATA[<h1 id="Java学习"><a href="#Java学习" class="headerlink" title="Java学习"></a>Java学习</h1><span id="more"></span>

<h2 id="java学习方法"><a href="#java学习方法" class="headerlink" title="java学习方法"></a>java学习方法</h2><ol>
<li>先学大概语法</li>
<li>然后快速入门</li>
<li>最后才扣细节（要不然出不来）</li>
</ol>
<h2 id="java规范"><a href="#java规范" class="headerlink" title="java规范*"></a>java规范*</h2><h3 id="java命名规范"><a href="#java命名规范" class="headerlink" title="java命名规范"></a>java命名规范</h3><ol>
<li>标识符由字母、数字、_和$组成</li>
<li>数字不能开头</li>
<li>不能用关键字和保留字</li>
<li>规范<ul>
<li>项目名：单词全小写，用-隔开aa, aa-bb</li>
<li>包名：单词全部小写aa, aabbcc</li>
<li><img data-src="/posts/14da/image-20221024103226504.png" alt="image-20221024103226504"></li>
<li>类名：单词首字母全部大写Aa,AaBbCc</li>
<li>方法和变量：一个单词全小写, 多个单词首单词全小写，其余单词首字母大写aa, aaBbCc</li>
</ul>
</li>
</ol>
<h3 id="java书写规范"><a href="#java书写规范" class="headerlink" title="java书写规范"></a>java书写规范</h3><ol>
<li>运算符和&#x3D;两边要有空格1 * 2 &#x3D; 2</li>
</ol>
<h3 id="java注释规范"><a href="#java注释规范" class="headerlink" title="java注释规范"></a>java注释规范</h3><ol>
<li>类和方法的注释要以javadoc方式来写</li>
<li>非javadoc注释是给代码维护者看的，要告诉读者，为什么这么写，怎么样修改，注意什么问题。</li>
<li>源文件用utf-8</li>
</ol>
<h2 id="java前置知识"><a href="#java前置知识" class="headerlink" title="java前置知识"></a>java前置知识</h2><h3 id="java转义字符"><a href="#java转义字符" class="headerlink" title="java转义字符"></a>java转义字符</h3><ul>
<li><p>\t</p>
<p>一个制表位，实现对齐</p>
</li>
<li><p>\n</p>
<p>换行</p>
</li>
<li><p>\\</p>
<p>输出字符\</p>
</li>
<li><p>\‘</p>
<p>输出字符 ‘ </p>
</li>
<li><p>\“</p>
<p>输出字符”</p>
</li>
<li><p>\r</p>
<p>回车(回城！&#x3D;换行，回车是将光标移动到首行，换行是将光标移动到下行)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">hello</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;账号的撒\r大大&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">大大的撒</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="java注释"><a href="#java注释" class="headerlink" title="java注释"></a>java注释</h3><p>方便自己回顾和他人阅读</p>
<ul>
<li>单行注释</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是java注释</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多行注释</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">这是</span></span><br><span class="line"><span class="comment">多行</span></span><br><span class="line"><span class="comment">注释</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>



<ul>
<li>文档注释和文档标签</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@tag</span>1</span></span><br><span class="line"><span class="comment">*   <span class="doctag">@tag</span>2</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//@用来生成自己API文档</span></span><br><span class="line"><span class="comment">//编辑命令：javadoc -d 路径 -tag1 -tag2 xxx.java    </span></span><br></pre></td></tr></table></figure>

<p><img data-src="/posts/14da/image-20221022164612229.png" alt="image-20221022164612229"></p>
<h3 id="DOS指令（cmd）"><a href="#DOS指令（cmd）" class="headerlink" title="DOS指令（cmd）"></a>DOS指令（cmd）</h3><ul>
<li>md 可一次多个目录</li>
<li>rd 可一次多个目录</li>
<li>cd 进入</li>
<li>tree 列出文件树</li>
<li>cls 清屏</li>
<li>exit 退出</li>
<li>copy 复制</li>
<li>del 删除文件</li>
<li>echo </li>
<li>type</li>
<li>move 移动</li>
</ul>
<h3 id="JavaAPI文档"><a href="#JavaAPI文档" class="headerlink" title="JavaAPI文档"></a>JavaAPI文档</h3><p>API（application programming interface应用程序编程接口）是java提供的类和接口，该文档告诉使用者如何使用API，链接:<strong><a href="https://www.matools.com/">中文文档</a></strong>,</p>
<h2 id="IDEA快捷键和模板"><a href="#IDEA快捷键和模板" class="headerlink" title="IDEA快捷键和模板"></a>IDEA快捷键和模板</h2><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a><strong>快捷键</strong></h3><h4 id="查看继承关系"><a href="#查看继承关系" class="headerlink" title="查看继承关系"></a>查看继承关系</h4><ul>
<li>ctrl+H</li>
</ul>
<h4 id="复制一行"><a href="#复制一行" class="headerlink" title="复制一行"></a>复制一行</h4><ul>
<li>鼠标下键</li>
</ul>
<h4 id="自动布局"><a href="#自动布局" class="headerlink" title="自动布局"></a>自动布局</h4><ul>
<li>ctrl+Q</li>
</ul>
<h4 id="生成构造器"><a href="#生成构造器" class="headerlink" title="生成构造器"></a>生成构造器</h4><ul>
<li>alt + insert</li>
</ul>
<h4 id="生成封装set和get"><a href="#生成封装set和get" class="headerlink" title="生成封装set和get"></a>生成封装set和get</h4><ul>
<li><p>alt+insert</p>
<pre><code>  #### 		自定义快捷键
</code></pre>
</li>
<li><p>files-&gt;settings-&gt;keymap</p>
</li>
</ul>
<h3 id="模板"><a href="#模板" class="headerlink" title="模板"></a><strong>模板</strong></h3><h4 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h4><ul>
<li>main</li>
</ul>
<h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><ul>
<li>sp</li>
</ul>
<h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><ul>
<li>sc</li>
</ul>
<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><ul>
<li>fori</li>
</ul>
<h4 id="自定义模板"><a href="#自定义模板" class="headerlink" title="自定义模板"></a>自定义模板</h4><ul>
<li>file-&gt;settings-&gt;editor-&gt;Live templates</li>
</ul>
<h1 id="JAVA概述"><a href="#JAVA概述" class="headerlink" title="JAVA概述"></a>JAVA概述</h1><h2 id="java语言特点"><a href="#java语言特点" class="headerlink" title="java语言特点"></a>java语言特点</h2><ul>
<li>面向对象的</li>
<li>健壮的(强类型机制、异常处理、垃圾回收)</li>
<li>跨平台的(JVM虚拟机)</li>
<li>解释性的(编译后的代码需要解释才可以执行)</li>
</ul>
<h2 id="java工具分类"><a href="#java工具分类" class="headerlink" title="java工具分类"></a>java工具分类</h2><ul>
<li>javaSE    standard     标准版</li>
<li>javaME   Mirco          微机版—-手机    </li>
<li>javaEE    Enterprise 企业版—–网络</li>
</ul>
<h2 id="JDK-gt-JRM-gt-JVM"><a href="#JDK-gt-JRM-gt-JVM" class="headerlink" title="JDK&gt;JRM&gt;JVM"></a>JDK&gt;JRM&gt;JVM</h2><h3 id="JVM-java-virtual-machine"><a href="#JVM-java-virtual-machine" class="headerlink" title="JVM(java virtual machine)"></a>JVM(java virtual machine)</h3><h4 id="JVM特点"><a href="#JVM特点" class="headerlink" title="JVM特点"></a>JVM特点</h4><ul>
<li>负责执行指令，管理数据、内存、寄存器</li>
<li>JVM包含在JDK(java development kit)当中</li>
<li>不同系统，有不同的虚拟机</li>
<li>JVM屏蔽了平台的差别，实现一次编译处处运行</li>
</ul>
<h4 id="java的运行机制"><a href="#java的运行机制" class="headerlink" title="java的运行机制"></a>java的运行机制</h4><ul>
<li>Test.java文件被javac编译为Test.class</li>
<li>Test文件被java运行(不带.class)，运行的是单纯的类</li>
</ul>
<h3 id="JDK-java-development-kit"><a href="#JDK-java-development-kit" class="headerlink" title="JDK(java development kit)"></a>JDK(java development kit)</h3><h4 id="JDk基本介绍"><a href="#JDk基本介绍" class="headerlink" title="JDk基本介绍"></a>JDk基本介绍</h4><ul>
<li>是java的开发工具包，用于开发</li>
<li>JDK&#x3D;JRE+java开发工具(javac、java、javadoc、javap等)</li>
<li>java开发工具在&#x2F;bin目录下面</li>
</ul>
<h3 id="JRE-java-runtime-environment"><a href="#JRE-java-runtime-environment" class="headerlink" title="JRE(java runtime environment)"></a>JRE(java runtime environment)</h3><h4 id="JRE基本介绍"><a href="#JRE基本介绍" class="headerlink" title="JRE基本介绍"></a>JRE基本介绍</h4><ul>
<li>是java运行环境，用于运行</li>
<li>JRE&#x3D;JVM+java的核心内库</li>
</ul>
<h2 id="下载jdk和配置相关环境"><a href="#下载jdk和配置相关环境" class="headerlink" title="下载jdk和配置相关环境"></a>下载jdk和配置相关环境</h2><p>参考链接：<a href="https://blog.csdn.net/qq_38436214/article/details/105071088">JDK 安装与环境变量配置</a></p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h3><h4 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h4><h5 id="整数类型"><a href="#整数类型" class="headerlink" title="整数类型"></a>整数类型</h5><p>​										byte       1字节</p>
<p>​										short     2字节</p>
<p>​										int         4字节</p>
<p>​										long      8字节    +l</p>
<h5 id="浮点类型"><a href="#浮点类型" class="headerlink" title="浮点类型"></a>浮点类型</h5><p>​										float      4字节    +f</p>
<p>​										double  8字节    +d  </p>
<h5 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h5><p>​										char        2字节</p>
<h5 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h5><p>​										boolean 1字节</p>
<h3 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h3><ol>
<li>类（class）<strong>String</strong>:不是基本数据类型，是类！      在常量池 </li>
<li>接口（interface）   </li>
<li>数组（[  ]）</li>
</ol>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><h3 id="自动类型转换"><a href="#自动类型转换" class="headerlink" title="自动类型转换"></a>自动类型转换</h3><ol>
<li>byte-&gt;short-&gt;int-&gt;long-&gt;float-&gt;double</li>
<li>char-&gt;int-&gt;long-&gt;float-&gt;double</li>
<li>数值型不能转换为布尔类型，因为char类型的本质是数值类型，所有char可以在其中相互转换</li>
</ol>
<h3 id="强制类型转换"><a href="#强制类型转换" class="headerlink" title="强制类型转换"></a>强制类型转换</h3><ol>
<li>由大到小转换, 书写byte x &#x3D; (byte)y ,  y为int类型</li>
<li>有大到小会造成精度损失</li>
<li>将基本数据类型转String类型，x+” “,基本数据类型+空格</li>
<li>将String类型转换为基本数据类型，调用parse方法。<img data-src="/posts/14da/image-20221022200142423.png" alt="image-20221022200142423"></li>
</ol>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ul>
<li>long、float数据类型要加上l&#x2F;L、f&#x2F;F</li>
<li>x.xxex、x.xxE-x:10的x次方、10的负x次方，可以用浮点表示</li>
<li>一般使用double类型，因为精度更高</li>
<li>8.1&#x2F;3&#x3D;2.699999999997！&#x3D;2.7，小数运算不能直接比较，需要对两个小数差值在某一范围内进行比较，Math.abs(a-b)&lt;0.001</li>
<li>字符常量需要用’ ‘引起来</li>
<li>char的本质是一个整数，可以进行运算</li>
<li>boolean只能储存true和false，不能储存1&#x2F;0</li>
<li>short，char，byte进行运算时会自动转换成int类型所以short&#x3D;short+byte   （×）</li>
<li><strong>byte，short，char的各种混合运算包括赋值运算位运算，都是先默认数值类为int类型运算最后强制转换。</strong></li>
</ul>
<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="进制"><a href="#进制" class="headerlink" title="进制"></a>进制</h2><ul>
<li>标识符：0b二进制、0八进制、0x十六进制</li>
</ul>
<h2 id="算数运算符"><a href="#算数运算符" class="headerlink" title="算数运算符*"></a>算数运算符*</h2><p>+、-、*、&#x2F;、%、++、–  </p>
<ul>
<li><p><strong>注意</strong>*：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">面试题<span class="number">1</span>：</span><br><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> <span class="number">10</span> / <span class="number">4</span>;</span><br><span class="line"><span class="comment">//x = 2.0</span></span><br><span class="line"><span class="number">10</span> % <span class="number">3</span> = <span class="number">1</span></span><br><span class="line"><span class="number">10</span> % -<span class="number">3</span> = <span class="number">1</span></span><br><span class="line">-<span class="number">10</span> % <span class="number">3</span> = -<span class="number">1</span></span><br><span class="line"><span class="comment">//a % b = a - a / b * b</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">面试题<span class="number">2</span>：</span><br><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = i++;</span><br><span class="line">System,out,println(i);</span><br><span class="line"><span class="comment">//i = 1;</span></span><br><span class="line"><span class="comment">//temp = i;</span></span><br><span class="line"><span class="comment">//i = i + 1;</span></span><br><span class="line"><span class="comment">//i = temp</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">i = ++i;</span><br><span class="line">System,out,println(i);</span><br><span class="line"><span class="comment">//i = 2</span></span><br><span class="line"><span class="comment">//i = i + 1</span></span><br><span class="line"><span class="comment">//temp = i</span></span><br><span class="line"><span class="comment">//i = temp</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h2><p>&#x3D;&#x3D;、！&#x3D;、&lt;、&gt;、&lt;&#x3D;、&gt;&#x3D;、instanceof</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">instanceof</span>:判断对象是否是类的实例</span><br><span class="line"><span class="string">&quot;xxxxx&quot;</span> <span class="keyword">instanceof</span> String </span><br><span class="line"><span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2><p>&amp;、&amp;&amp;、|、||、！、^</p>
<p>&amp;：逻辑与</p>
<p>|：逻辑或</p>
<p>&amp;&amp;：短路与</p>
<p>||：短路或</p>
<p>！：取反</p>
<p>^：异或，同为假，异为真</p>
<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2><p>+&#x3D;、-+、*&#x3D;、&#x2F;&#x3D;</p>
<p>注意：赋值的时候会进行强制类型转换</p>
<h2 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h2><h3 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h3><ul>
<li>正数三码合一都一样</li>
<li><strong>负数的符号位不改变</strong></li>
<li>负数的补码&#x3D;反码+1</li>
<li>java没有无符号数</li>
<li><strong>计算时用补码</strong></li>
<li>显示时用原码</li>
<li><strong>-128的补码是10000000</strong></li>
</ul>
<h3 id="第一种位运算"><a href="#第一种位运算" class="headerlink" title="第一种位运算"></a>第一种位运算</h3><ul>
<li>按位取反：~，每位相反(符号也会取反)</li>
<li>按位异或：^，两位相同为0，不同则为1</li>
<li>按位与：&amp;，两位为1，则为1</li>
<li>按位或 ：|， 两位有1，则为1</li>
</ul>
<h3 id="第二种位运算"><a href="#第二种位运算" class="headerlink" title="第二种位运算"></a>第二种位运算</h3><ul>
<li>&lt;&lt;算数左移，与符号位无关，全补0</li>
<li>&gt;&gt;算数右移，与符号位有关，正补0，负补1</li>
<li>&gt;&gt;&gt;无符号右移，与符号无关，全补0</li>
<li>注意：位移运算符是对补码的位移，不是原码的位移</li>
<li>注意：byte和short进行位运算时要先转化成int类型才位移</li>
<li><strong>思考：byte x &#x3D; (byte)-5&gt;&gt;2; x &#x3D; ?</strong></li>
</ul>
<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2><p>条件表达式？表达式1:表达式2</p>
<p>为真则1，为假则2</p>
<h2 id="运算符的优先级"><a href="#运算符的优先级" class="headerlink" title="运算符的优先级"></a>运算符的优先级</h2><p><img data-src="/posts/14da/image-20221023083013698.png" alt="image-20221023083013698"></p>
<h1 id="控制结构"><a href="#控制结构" class="headerlink" title="控制结构"></a>控制结构</h1><h2 id="分支控制"><a href="#分支控制" class="headerlink" title="分支控制"></a>分支控制</h2><h3 id="单分支"><a href="#单分支" class="headerlink" title="单分支"></a>单分支</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    orders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双分支"><a href="#双分支" class="headerlink" title="双分支"></a>双分支</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    orders;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    orders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="多分支"><a href="#多分支" class="headerlink" title="多分支"></a>多分支</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>()&#123;</span><br><span class="line">    orders;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>()&#123;</span><br><span class="line">    orders;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    orders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="switch分支"><a href="#switch分支" class="headerlink" title="switch分支"></a>switch分支</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">1</span>:</span><br><span class="line">        orders;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">2</span>:</span><br><span class="line">        orders;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> 常量<span class="number">3</span>:</span><br><span class="line">        orders;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        orders;</span><br><span class="line">        <span class="keyword">break</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//表达式对应一个值</span></span><br></pre></td></tr></table></figure>

<ul>
<li>细节：表达式的值不能是浮点类型，必须是byte、short、int、char、String、enum</li>
<li>细节：break必须有，否则就会不看匹配直接执行下面的指令。</li>
</ul>
<h2 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化;条件判断;变量变化)&#123;</span><br><span class="line">    orders;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>()&#123;</span><br><span class="line">    orders;</span><br><span class="line">    变量变换;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    orders;</span><br><span class="line">    变量变换;</span><br><span class="line">&#125;<span class="keyword">while</span>(判断条件);</span><br><span class="line"><span class="comment">//一定会执行一</span></span><br></pre></td></tr></table></figure>

<h2 id="break"><a href="#break" class="headerlink" title="break"></a>break</h2><ul>
<li>跳出循环</li>
</ul>
<h2 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h2><ul>
<li>跳出本次循环直接进行下次循环</li>
</ul>
<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><h3 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h3><ul>
<li><p>数组声明</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">int<span class="selector-attr">[]</span> <span class="selector-tag">b</span>;</span><br><span class="line">int <span class="selector-tag">b</span><span class="selector-attr">[]</span>;</span><br></pre></td></tr></table></figure>
</li>
<li><p>有初值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态初始化</span></span><br><span class="line"><span class="type">int</span> a[];</span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">---</span><br><span class="line"><span class="type">int</span> a[] = <span class="keyword">new</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">---</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line">---</span><br><span class="line"><span class="type">int</span> a[ ] = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line"><span class="comment">//动态初始化</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="内存中"><a href="#内存中" class="headerlink" title="内存中"></a>内存中</h3><h3 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h3><ul>
<li><p>表示数组长度</p>
</li>
<li><p>用法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[] = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> a.length;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="二位数组"><a href="#二位数组" class="headerlink" title="二位数组"></a>二位数组</h2><h3 id="数组声明"><a href="#数组声明" class="headerlink" title="数组声明"></a>数组声明</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span>[][] a;</span><br><span class="line"><span class="type">int</span> a[][];</span><br></pre></td></tr></table></figure>

<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[][]&#123;</span><br><span class="line">    &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;,</span><br><span class="line">    &#123;<span class="number">2</span>&#125;,</span><br><span class="line">    &#123;<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//静态</span></span><br><span class="line">a = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line">a[<span class="number">0</span>] = &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line">a[<span class="number">1</span>] = &#123;<span class="number">1</span>,<span class="number">3</span>&#125;</span><br><span class="line">a[<span class="number">2</span>] = &#123;<span class="number">3</span>&#125;</span><br><span class="line"><span class="comment">//动态</span></span><br></pre></td></tr></table></figure>

<h3 id="length"><a href="#length" class="headerlink" title="length"></a>length</h3><p>a.length是二位数组的元素个数也就是行数。</p>
<p>a[x].length是x-1行的元素个数，也就是那行的列数。</p>
<h3 id="内存中-1"><a href="#内存中-1" class="headerlink" title="内存中"></a>内存中</h3><p><img data-src="/posts/14da/image-20221023145102452.png" alt="image-20221023145102452"></p>
<h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><ul>
<li>数组名存放的是数组变量的首地址</li>
<li>一位数组未赋值则为0，二维数组不会自动赋值</li>
<li>二维数组的赋值有, 和 ; 要小心</li>
</ul>
<h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h2 id="键盘输入"><a href="#键盘输入" class="headerlink" title="键盘输入"></a>键盘输入</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Scanner</span><br><span class="line"><span class="comment">//引入包</span></span><br><span class="line"><span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line"><span class="comment">//创建Scanner的对象</span></span><br><span class="line"><span class="type">byte</span>   <span class="variable">x</span> <span class="operator">=</span> input.nextByte();</span><br><span class="line"><span class="type">short</span>  <span class="variable">x</span> <span class="operator">=</span> input.nextShort();</span><br><span class="line"><span class="type">int</span>    <span class="variable">x</span> <span class="operator">=</span> input.nextInt();</span><br><span class="line"><span class="type">long</span>   <span class="variable">x</span> <span class="operator">=</span> input.nextLong();</span><br><span class="line"><span class="type">float</span>  <span class="variable">x</span> <span class="operator">=</span> input.nextFloat();</span><br><span class="line"><span class="type">double</span> <span class="variable">x</span> <span class="operator">=</span> input.nextDouble();</span><br><span class="line"><span class="type">String</span> <span class="variable">x</span> <span class="operator">=</span> input.next();</span><br><span class="line"><span class="comment">//调用input的方法来传递值</span></span><br><span class="line"><span class="type">char</span>   <span class="variable">x</span> <span class="operator">=</span> input.next().charAt();</span><br></pre></td></tr></table></figure>

<h2 id="随机数生成"><a href="#随机数生成" class="headerlink" title="随机数生成"></a>随机数生成</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">x = (<span class="type">int</span>)(Math.random.()*<span class="number">100</span>+<span class="number">1</span>)</span><br><span class="line"><span class="comment">//Math.random（）生成的是0——1的小数*10^k表明随机数范围，int表明取值整，+1表明不取0</span></span><br></pre></td></tr></table></figure>

<h1 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h1><h2 id="对象的内存分布"><a href="#对象的内存分布" class="headerlink" title="对象的内存分布"></a>对象的内存分布</h2><p><img data-src="/posts/14da/image-20221023153450464.png" alt="image-20221023153450464"></p>
<h2 id="对象成员变量和成员方法"><a href="#对象成员变量和成员方法" class="headerlink" title="对象成员变量和成员方法"></a>对象成员变量和成员方法</h2><ul>
<li>类里面定义的变量即为属性和成员变量</li>
<li>类里面定义的方法即为成员方法</li>
</ul>
<h2 id="对象的创建"><a href="#对象的创建" class="headerlink" title="对象的创建"></a>对象的创建</h2><ul>
<li><p>先声明再创建</p>
<p>Cat cat;</p>
<p>Cat cat &#x3D; new Cat();</p>
</li>
<li><p>直接创建</p>
<p>Cat cat &#x3D; new Cat( );</p>
</li>
</ul>
<h2 id="对象属性和方法的访问"><a href="#对象属性和方法的访问" class="headerlink" title="对象属性和方法的访问"></a>对象属性和方法的访问</h2><ul>
<li>xxx.xxx</li>
<li>xxx.xxx( ) ;</li>
</ul>
<h2 id="方法重载"><a href="#方法重载" class="headerlink" title="方法重载"></a>方法重载</h2><ul>
<li><p>java允许有同名方法但是参数列表不能一样</p>
</li>
<li><p>可变参数的方法重载</p>
<p>java方法允许传入多个类型相同的参数，特殊的传入,本质是数组，只能放在其他同名方法的后面</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">(<span class="type">int</span>... nums)</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">res</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i &lt; nums.length;i++)&#123;</span><br><span class="line">        res += nums[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="构造器、构造方法"><a href="#构造器、构造方法" class="headerlink" title="构造器、构造方法"></a>构造器、构造方法</h2><blockquote>
<p><u>作用：完成对对象的初始化</u></p>
</blockquote>
<ul>
<li>修饰符可以默认</li>
<li>没有返回值，void也没有 </li>
<li><strong>名字和类名必须相同</strong></li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line">	<span class="type">int</span> age;</span><br><span class="line">	<span class="type">String</span> name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">person</span><span class="params">(<span class="type">int</span> age,<span class="type">String</span> name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.age = age;</span><br><span class="line">		<span class="keyword">this</span>.name = name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Person xiaoming = <span class="keyword">new</span> <span class="built_in">Person</span>(<span class="number">16</span>,<span class="string">&quot;小明&quot;</span>);</span><br></pre></td></tr></table></figure>

<blockquote>
<p>一个类可以有多个构造器</p>
</blockquote>
<ul>
<li>这种方法为构造器的重载</li>
<li>参数列表要不同</li>
</ul>
<blockquote>
<p>默认构造器</p>
</blockquote>
<ul>
<li><p>如果没有定义构造器，则系统会默认生成一个无参构造器，比如</p>
<p>public Person(){};</p>
</li>
<li><p>如果定义了有参构造器，则无参构造器就不能再使用（即必须给参数来构造对象），除非自己定义一个无参构造器</p>
</li>
</ul>
<blockquote>
<p>构造时的内存变化</p>
</blockquote>
<p><img data-src="/posts/14da/image-20221024082558565.png" alt="image-20221024082558565"></p>
<h2 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h2><ul>
<li>虚拟机会为每个对象分配一个this变量，他指向当前对象在堆中的地址，可以调用该对象的方法和变量</li>
</ul>
<p><img data-src="/posts/14da/image-20221024083156912.png" alt="image-20221024083156912"></p>
<ul>
<li>在构造器中访问其他构造器必须要在第一条语句，this(参数列表);</li>
<li>而且必须只能在构造器中访问</li>
</ul>
<h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><h2 id="包的声明"><a href="#包的声明" class="headerlink" title="包的声明"></a>包的声明</h2><ul>
<li><p>放在代码的最上方,有分号</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xxx.xxx;</span><br></pre></td></tr></table></figure>
</li>
<li><p>import指令在包的声明下方，可以有多条</p>
</li>
</ul>
<h2 id="包的命名"><a href="#包的命名" class="headerlink" title="包的命名"></a>包的命名</h2><p><img data-src="/posts/14da/image-20221024103944230.png" alt="image-20221024103944230"></p>
<h2 id="常用包"><a href="#常用包" class="headerlink" title="常用包"></a>常用包</h2><ul>
<li>java.lang</li>
<li>java.util工具包</li>
<li>java.net网络开发</li>
<li>java.awt 界面开发</li>
</ul>
<h2 id="包的引入"><a href="#包的引入" class="headerlink" title="包的引入"></a>包的引入</h2><ul>
<li><p>import java.util.scanner;</p>
<p>引入确定的某个类</p>
</li>
<li><p>import java.util.*</p>
<p>&#x2F;&#x2F;引入所有类</p>
</li>
</ul>
<h1 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h1><h2 id="public"><a href="#public" class="headerlink" title="public"></a>public</h2><ul>
<li>谁都可以访问，其他包要先引入后才能访问</li>
</ul>
<h2 id="protected"><a href="#protected" class="headerlink" title="protected"></a>protected</h2><ul>
<li>同类，同包，子类可以访问，其他包的非子类不能访问，其他包的子类可以访问</li>
</ul>
<h2 id="default"><a href="#default" class="headerlink" title="default"></a>default</h2><ul>
<li>没有加即为默认，同类，同包可以访问</li>
</ul>
<h2 id="private"><a href="#private" class="headerlink" title="private"></a>private</h2><ul>
<li>只有该类可以访问</li>
</ul>
<h1 id="封装、继承、多态"><a href="#封装、继承、多态" class="headerlink" title="封装、继承、多态"></a>封装、继承、多态</h1><h2 id="封装encapsulation"><a href="#封装encapsulation" class="headerlink" title="封装encapsulation"></a>封装encapsulation</h2><h3 id="封装特点"><a href="#封装特点" class="headerlink" title="封装特点"></a>封装特点</h3><ul>
<li>隐藏实现的细节</li>
<li>对数据进行验证，避免不合理的数据，保证合理与安全</li>
</ul>
<h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><ul>
<li><p>将属性私有化</p>
</li>
<li><p>提供一个公共（set）方法，用于对属性进行<strong>判断</strong>和<strong>赋值</strong></p>
</li>
<li><p>提供一个公共（get）方法，用于获得属性的值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(name.length &gt;= <span class="number">2</span> &amp;&amp; name.length &lt;= <span class="number">6</span>)&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;输入非法，请重新输入&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在封装的set里面要进行对数据合理性的验证</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">getSalary</span><span class="params">(<span class="type">int</span> nums)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( nums = password )&#123;</span><br><span class="line">         System.out.println(<span class="string">&quot;密码错误，请重新输入&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在get方法中加入对权限的判断来保证数据的安全</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>避免构造器破解的办法，直接将set方法植入构造器中，以set方法来赋值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Person</span><span class="params">(String name)</span>&#123;</span><br><span class="line">    setName(name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul>
<li><p>代码的复用性、扩展性和维护性</p>
</li>
<li><p>继承用来解决代码的复用问题，当多个类有相同的属性和方法的时候，我们可以从中抽取出父类，子类不需要重新声明，只需要用extends来继承。</p>
</li>
<li><p>父类又被称为超类，基类，子类又被称为派生类</p>
</li>
</ul>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><ul>
<li>子类继承的私有属性不能直接访问</li>
<li>子类必须调用父类的构造器，完成父类的初始化，在子类无参构造器中会默认有super();调用父类的构造器</li>
<li>创建子类对象的时候不管调用什么构造器都会默认调用父类的无参构造器，如果父类没有无参构造器，则子类构造器中必须用super指明调用父类的哪一个构造器，如果没有编译将不会通过 </li>
<li>继承只能单继承</li>
</ul>
<h3 id="父类构造器的调用"><a href="#父类构造器的调用" class="headerlink" title="父类构造器的调用"></a>父类构造器的调用</h3><ul>
<li>super、this必须放在子类构造器的第一行</li>
<li>super只能放在构造器中</li>
<li>super和this不能同时存在</li>
</ul>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 子类构造器(<span class="type">String</span> name,<span class="type">int</span> age)&#123;</span><br><span class="line">	<span class="built_in">super</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用父类无参构造器</span></span><br><span class="line">或者什么都不写来调用父类无参构造器</span><br><span class="line"><span class="keyword">public</span> 子类构造器(<span class="type">String</span> name,<span class="type">int</span> age)&#123;</span><br><span class="line">	<span class="built_in">super</span>(<span class="string">&quot;xxx&quot;</span>,<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//调用父类有参构造器</span></span><br></pre></td></tr></table></figure>

<ul>
<li>所有的类都是Object的子类</li>
<li>父类构造器是先从Object类开始构造直到当前父类</li>
</ul>
<h3 id="内存中的生成顺序和注意"><a href="#内存中的生成顺序和注意" class="headerlink" title="内存中的生成顺序和注意"></a>内存中的生成顺序和注意</h3><p><img data-src="/posts/14da/image-20221024150517047.png" alt="image-20221024150517047"></p>
<ul>
<li><strong>访问子类的成员变量时，先访问子类的这个变量，如果没有则向上访问，直到访问到Object或者报错</strong></li>
</ul>
<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><ul>
<li><p>表示对父类的引用，用于访问父类的属性、方法和构造器。</p>
</li>
<li><p>super的访问符合就近原则</p>
</li>
<li><p>super和this的区别</p>
<p><img data-src="/posts/14da/image-20221024151731152.png" alt="image-20221024151731152"></p>
</li>
</ul>
<h3 id="方法重写"><a href="#方法重写" class="headerlink" title="方法重写"></a>方法重写</h3><ul>
<li><p>子类有个方法和父类（包括长辈级）的某个方法，名字、参数和返回值完全一样，那么子类的该方法就覆盖了父类的方法称为方法重写</p>
</li>
<li><p>返回值如果是上下级关系也可以进行重写，比如父类返回A类，子类返回B类，B类是A类的子类。或者父类返回Object类，子类返回String也可以。</p>
</li>
<li><p>子类不能缩小父类的访问权限。比如父类a方法为public，子类a方法不能是private。</p>
</li>
<li><p>与方法重载的区别</p>
<p><img data-src="/posts/14da/image-20221024153046762.png" alt="image-20221024153046762"></p>
</li>
</ul>
<h3 id="instanceOf"><a href="#instanceOf" class="headerlink" title="instanceOf"></a>instanceOf</h3><ul>
<li><p>判断运行类型a是不是b，或者b的子类</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">A instanceOf B;</span><br><span class="line"><span class="regexp">//</span>返回<span class="literal">true</span>或者<span class="literal">false</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li>方法或者对象具有多种形态。建立在继承和封装之上。</li>
</ul>
<h3 id="方法多态（多种形态）"><a href="#方法多态（多种形态）" class="headerlink" title="方法多态（多种形态）"></a>方法多态（多种形态）</h3><ul>
<li>体现在重写和重载</li>
</ul>
<h3 id="对象的多态（多态的核心）"><a href="#对象的多态（多态的核心）" class="headerlink" title="对象的多态（多态的核心）"></a>对象的多态（多态的核心）</h3><ul>
<li><p>一个对象的编译（声明）类型和运行类型可以不一样</p>
</li>
<li><p>属性没有多态重写的说法，属性的值只看编译类型</p>
</li>
<li><p>编译（声明）类型不能改变，运行类型可以改变</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line"><span class="comment">//此时运行类型为dog，animal指向堆里面的dog，调用animal.say(),即调用dog的say方法，父类和子类都有同样的方法</span></span><br><span class="line">animal = <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="comment">//animal为编译（声明）类型，Dog和Cat为运行类型</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>可以调用父类的所有成员，不能调用子类的特有成</p>
</li>
</ul>
<h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型"></a>向上转型</h3><ul>
<li>本质，父类的引用指向子类的对象，多态就是向上转型</li>
<li>&#x3D;&#x3D;<strong>方法才进行向上转型，变量不进行向上转型，直接就是父类的变量</strong>&#x3D;&#x3D;</li>
</ul>
<h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型"></a>向下转型</h3><ul>
<li><p>只能强制转换父类的引用，不能强制转换父类的对象</p>
</li>
<li><p>相当于新建一个该运行对象的引用来指向该的运行对象</p>
</li>
<li><p>向下转型后可以访问子类的所有成员</p>
</li>
<li><p>语法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Animal</span> <span class="variable">animal</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Cat</span>();</span><br><span class="line"><span class="type">Cat</span> <span class="variable">cat</span> <span class="operator">=</span> (Cat)animal;</span><br></pre></td></tr></table></figure>
</li>
<li><p>相当于强制类型转换。</p>
</li>
<li><p>只能父类向该子类转型，不能向其他子类向下转型</p>
</li>
</ul>
<h3 id="动态绑定机制"><a href="#动态绑定机制" class="headerlink" title="动态绑定机制*******************"></a><strong>动态绑定机制</strong>*******************</h3><ul>
<li><p>当调用对象方法的时候，该方法名字会和运行对象地址绑定</p>
</li>
<li><p>调用对象属性的时候，不会和运行对象绑定</p>
</li>
<li><p>简单来说，就是父类声明运行子类对象的时候，子类的所有方法名字都和子类的运行对象绑定，在父类方法中调用该方法也是子类的方法，而属性没有这样的特性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//代码演示</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> getI() + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">sum1</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num + <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_">A</span>&#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> <span class="number">20</span>;</span><br><span class="line"><span class="comment">//    public int sum()&#123;</span></span><br><span class="line"><span class="comment">//       return getI() + 10;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    public int sum1()&#123;</span></span><br><span class="line"><span class="comment">//        return num + 10;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getI</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">   		<span class="type">A</span> <span class="variable">a</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">B</span>();</span><br><span class="line">  		System.out.println(a.sum());</span><br><span class="line">    	System.out.println(a.sum1());</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<details>
<summary>答案</summary>
30,20
</details></li>
</ul>
<h3 id="习题"><a href="#习题" class="headerlink" title="习题"></a>习题</h3><p><img data-src="/posts/14da/image-20221024200218149.png" alt="image-20221024200218149"></p>
<details>
<summary>答案</summary>
20，20，true，10，20
</details>



<h3 id="多态数组"><a href="#多态数组" class="headerlink" title="多态数组"></a>多态数组</h3><ul>
<li>用父类创建数组来储存父类和各种子类。</li>
<li>用循环遍历方法，根据动态绑定机制，输出即为该运行对象的方法</li>
<li>多态数组的向下转型，用到if和instanceOf的组合运用</li>
</ul>
<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1><h2 id="x3D-x3D-和equals的区别"><a href="#x3D-x3D-和equals的区别" class="headerlink" title="&#x3D;&#x3D;和equals的区别"></a>&#x3D;&#x3D;和equals的区别</h2><ul>
<li>&#x3D;&#x3D;对基本类型判断值是否相等</li>
<li>&#x3D;&#x3D;对引用类型判断地址是否相等</li>
<li>equals只能判断引用类型，判断对象指向地址是否相等</li>
</ul>
<h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="java开发问题"><a href="#java开发问题" class="headerlink" title="java开发问题"></a>java开发问题</h2><ol>
<li><p>一个源文件最多出现一个public类，每一个类都会生成一个.class文件</p>
</li>
<li><p>共有类的文件名必须是public</p>
</li>
<li><p>主方法也可以写在非公共类中，一个文件内可以有多个主方法，但是运行的时候要指定方法的入口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">animals</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">dog</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">cat</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">javac animals.java</span><br><span class="line"><span class="comment">//此时会生成三个.class文件</span></span><br><span class="line">java cat</span><br><span class="line"><span class="comment">//运行cat的class文件，按非public类执行main方法</span></span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="unicode编码问题"><a href="#unicode编码问题" class="headerlink" title="unicode编码问题"></a>unicode编码问题</h2><p>8.1&#x2F;3&#x3D;2.699999999997！&#x3D;2.7，小数运算不能直接比较，需要对两个小数差值在某一范围内进行比较，Math.abs(a-b)&lt;0.001</p>
<p>x.xxex、x.xxE-x:10的x次方、10的负x次方，可以用浮点表示</p>
<p>instanceof</p>
]]></content>
  </entry>
  <entry>
    <title>Linux学习笔记</title>
    <url>/posts/86b7.html</url>
    <content><![CDATA[<h1 id="Linux常用命令"><a href="#Linux常用命令" class="headerlink" title="Linux常用命令"></a>Linux常用命令</h1><span id="more"></span>

<h2 id="1、列出文件————ls"><a href="#1、列出文件————ls" class="headerlink" title="1、列出文件————ls"></a>1、列出文件————ls</h2><ul>
<li>-a 列出全部文件</li>
<li>-t 按时间列出文件</li>
<li>-l列出文件全部信息</li>
<li>-S按文件大小信息</li>
</ul>
<hr>
<h2 id="2、进入文件————cd"><a href="#2、进入文件————cd" class="headerlink" title="2、进入文件————cd"></a>2、进入文件————cd</h2><ul>
<li>&#x2F;进入主目录</li>
<li>~进入根目录</li>
<li>-进入上次路径</li>
<li>..进入上级目录</li>
<li>&#x2F;xxx&#x2F;xxx 绝对路径进入</li>
<li>.&#x2F;xxx相对路径进入</li>
</ul>
<hr>
<h2 id="3、查看当前路径——-pwd"><a href="#3、查看当前路径——-pwd" class="headerlink" title="3、查看当前路径——-pwd"></a>3、查看当前路径——-pwd</h2><ul>
<li>-p查看软连接的实际路径</li>
</ul>
<hr>
<h2 id="4、创建文件夹———mkdir"><a href="#4、创建文件夹———mkdir" class="headerlink" title="4、创建文件夹———mkdir"></a>4、创建文件夹———mkdir</h2><ul>
<li>-p &#x2F;xxx&#x2F;xxx  若路径中的某些目录尚不存在,加上此选项后，系统将自动建立好那些尚不在的目录，即一次可以建立多个目录</li>
</ul>
<hr>
<h2 id="5、删除文件夹———rmdir"><a href="#5、删除文件夹———rmdir" class="headerlink" title="5、删除文件夹———rmdir"></a>5、删除文件夹———rmdir</h2><ul>
<li>-p  xxx&#x2F;xxx  删除文件夹后如果为空则全删除</li>
</ul>
<hr>
<h2 id="6、删除文件————rm"><a href="#6、删除文件————rm" class="headerlink" title="6、删除文件————rm"></a>6、删除文件————rm</h2><ul>
<li>-rf   xxx 删除目录和所有文件并且不询问</li>
<li>-i    xxx删除前询问</li>
</ul>
<hr>
<h2 id="7、重命名和移动——-mv"><a href="#7、重命名和移动——-mv" class="headerlink" title="7、重命名和移动——-mv"></a>7、重命名和移动——-mv</h2><ul>
<li>mv file1 file2 把file1命名为file2</li>
<li>mv file1 file2 file3 &#x2F;dir 把文件123移动到dir中</li>
<li>mv   *   ..&#x2F;     把当前所有文件上移一级</li>
</ul>
<hr>
<h2 id="8、复制文件————cp"><a href="#8、复制文件————cp" class="headerlink" title="8、复制文件————cp"></a>8、复制文件————cp</h2><ul>
<li>cp file dir   复制文件到目录</li>
<li>-r 复制目录及其文件到目标目录</li>
<li>-s  x.txt  link_x.txt  创建快捷方式</li>
</ul>
<hr>
<h2 id="9、显示创建合并文件–cat"><a href="#9、显示创建合并文件–cat" class="headerlink" title="9、显示创建合并文件–cat"></a>9、显示创建合并文件–cat</h2><ul>
<li>cat file 显示文件内容</li>
<li>cat &gt; filename 创建一个文件</li>
<li>cat dir1 dir2 &gt; dir3合并dir12为dir3</li>
</ul>
<hr>
<h2 id="10、查找"><a href="#10、查找" class="headerlink" title="10、查找"></a>10、查找</h2><h3 id="whereis"><a href="#whereis" class="headerlink" title="whereis"></a>whereis</h3><ul>
<li>该指令只能用于查找二进制文件、源代码文件和man手册页</li>
</ul>
<h3 id="locate"><a href="#locate" class="headerlink" title="locate"></a>locate</h3><ul>
<li>用于一般文件的定位</li>
<li>-l num 显示多少行信息</li>
<li>xx&#x2F;xx 查找xx目录下信息</li>
</ul>
<h3 id="find"><a href="#find" class="headerlink" title="find"></a>find</h3><ul>
<li>遍历硬盘查找文件</li>
<li>&#x2F;dir xxx 指定目录下查找文件</li>
</ul>
<h3 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h3><ul>
<li><p>筛选，一般配合管道操作</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cat</span> /etc/passwd | grep -ni -m 1 zper</span></span><br><span class="line">//-n显示行号</span><br><span class="line">//-i忽略大小写</span><br><span class="line">//-m需要打印几行</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="11、权限修改———–chmod"><a href="#11、权限修改———–chmod" class="headerlink" title="11、权限修改———–chmod"></a>11、权限修改———–chmod</h2><ul>
<li>chmod r file增加读权限</li>
<li>chmod w file增加写权限</li>
<li>chmod x file增加</li>
<li>chmod -x file</li>
</ul>
<hr>
<h2 id="12、显示磁盘空间——df"><a href="#12、显示磁盘空间——df" class="headerlink" title="12、显示磁盘空间——df"></a>12、显示磁盘空间——df</h2><ul>
<li>-a全部文件</li>
<li>-h便于阅读的形式比如KB、MB</li>
</ul>
<hr>
<h2 id="13、显示文件大小——du"><a href="#13、显示文件大小——du" class="headerlink" title="13、显示文件大小——du"></a>13、显示文件大小——du</h2><ul>
<li>-a 全部文件</li>
<li>-h以易于读的方式显示</li>
</ul>
<hr>
<h2 id="14、查看进程———–ps"><a href="#14、查看进程———–ps" class="headerlink" title="14、查看进程———–ps"></a>14、查看进程———–ps</h2><ul>
<li>a显示所有进程</li>
<li>-f  详细信息</li>
</ul>
<hr>
<h2 id="15、中止进程———–kill"><a href="#15、中止进程———–kill" class="headerlink" title="15、中止进程———–kill"></a>15、中止进程———–kill</h2><hr>
<h2 id="16、创建文件———–touch"><a href="#16、创建文件———–touch" class="headerlink" title="16、创建文件———–touch"></a>16、创建文件———–touch</h2><hr>
<h2 id="17、下载"><a href="#17、下载" class="headerlink" title="17、下载"></a>17、下载</h2><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><ul>
<li>-y install      不需要确认下载，centos下的下载指令</li>
</ul>
<h3 id="apt"><a href="#apt" class="headerlink" title="apt"></a>apt</h3><ul>
<li>-y install      不需要确认下载，ubuntu下的下载指令</li>
</ul>
<hr>
<h2 id="18、书写文件———–vim"><a href="#18、书写文件———–vim" class="headerlink" title="18、书写文件———–vim"></a>18、书写文件———–vim</h2><p>书写模式</p>
<ul>
<li>i</li>
</ul>
<p>指令模式</p>
<ul>
<li><p>: 进入指令模式</p>
</li>
<li><p>保存———–wq</p>
<p>退出不保存—-q!</p>
</li>
</ul>
<p>退出模式</p>
<ul>
<li>Esc</li>
</ul>
<hr>
<h2 id="19、其他指令"><a href="#19、其他指令" class="headerlink" title="19、其他指令"></a>19、其他指令</h2><h3 id="查看历史命令"><a href="#查看历史命令" class="headerlink" title="查看历史命令"></a>查看历史命令</h3><ul>
<li>history</li>
</ul>
<h3 id="注释命令（方便回查）"><a href="#注释命令（方便回查）" class="headerlink" title="注释命令（方便回查）"></a>注释命令（方便回查）</h3><ul>
<li>#</li>
</ul>
<h3 id="换行继续输入指令"><a href="#换行继续输入指令" class="headerlink" title="换行继续输入指令"></a>换行继续输入指令</h3><ul>
<li>\+entry</li>
</ul>
<h3 id="并行输入指令"><a href="#并行输入指令" class="headerlink" title="并行输入指令"></a>并行输入指令</h3><ul>
<li><strong>&amp;&amp;</strong> </li>
<li><strong>;</strong></li>
</ul>
<h3 id="查看版本号"><a href="#查看版本号" class="headerlink" title="查看版本号"></a>查看版本号</h3><ul>
<li>cat &#x2F;etc&#x2F;centos-release</li>
</ul>
<h3 id="访问主机xxx端口"><a href="#访问主机xxx端口" class="headerlink" title="访问主机xxx端口"></a>访问主机xxx端口</h3><ul>
<li>curl localhost:xxx</li>
</ul>
<h3 id="下所有文件"><a href="#下所有文件" class="headerlink" title="下所有文件"></a>下所有文件</h3><ul>
<li>dir&#x2F;*      dir</li>
</ul>
<h3 id="设置初始root密码"><a href="#设置初始root密码" class="headerlink" title="设置初始root密码"></a>设置初始root密码</h3><ul>
<li>sudo passwd</li>
</ul>
<h3 id="进入root账户"><a href="#进入root账户" class="headerlink" title="进入root账户"></a>进入root账户</h3><ul>
<li>su</li>
</ul>
<h3 id="时间戳"><a href="#时间戳" class="headerlink" title="时间戳"></a>时间戳</h3><ul>
<li>date +%s</li>
</ul>
<h3 id="定时任务-用于自动化执行脚本"><a href="#定时任务-用于自动化执行脚本" class="headerlink" title="定时任务(用于自动化执行脚本)"></a>定时任务(用于自动化执行脚本)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">//查看所有的定时脚本</span><br><span class="line">crontab -e</span><br><span class="line">//edit,编辑一个定时脚本</span><br><span class="line"></span><br><span class="line">*  *  *  *   *</span><br><span class="line">分 时 天  月 星期</span><br><span class="line">0 2 * * * /root/zper.sh 参数</span><br></pre></td></tr></table></figure>

<h2 id="看是谁"><a href="#看是谁" class="headerlink" title="看是谁"></a>看是谁</h2><ul>
<li><p>who am i</p>
<p>看自己</p>
</li>
<li><p>who</p>
<p>root下看所有人</p>
</li>
</ul>
<h2 id="用户消息"><a href="#用户消息" class="headerlink" title="用户消息"></a>用户消息</h2><ul>
<li><p>who  -T</p>
<p>看是否开启消息</p>
</li>
<li><p>mesg y</p>
<p>开启消息</p>
</li>
<li><p>mesg n</p>
<p>关闭消息</p>
</li>
<li><p>write username TTY</p>
<p>向username发送消息、</p>
</li>
</ul>
<h2 id="查看是否网络联通"><a href="#查看是否网络联通" class="headerlink" title="查看是否网络联通"></a>查看是否网络联通</h2><ul>
<li>ping ip地址</li>
</ul>
<hr>
<h2 id><a href="#" class="headerlink" title></a></h2><h1 id="Linux快捷键"><a href="#Linux快捷键" class="headerlink" title="Linux快捷键"></a>Linux快捷键</h1><h3 id="自动补全指令"><a href="#自动补全指令" class="headerlink" title="自动补全指令"></a>自动补全指令</h3><ul>
<li>TAB</li>
</ul>
<h3 id="清空光标前输入"><a href="#清空光标前输入" class="headerlink" title="清空光标前输入"></a>清空光标前输入</h3><ul>
<li>ctrl-u</li>
</ul>
<h3 id="清空光标后输入"><a href="#清空光标后输入" class="headerlink" title="清空光标后输入"></a>清空光标后输入</h3><ul>
<li>ctrl-k</li>
</ul>
<h3 id="移动光标到首行"><a href="#移动光标到首行" class="headerlink" title="移动光标到首行"></a>移动光标到首行</h3><ul>
<li>ctrl-a</li>
</ul>
<h3 id="移动光标到尾行"><a href="#移动光标到尾行" class="headerlink" title="移动光标到尾行"></a>移动光标到尾行</h3><ul>
<li>ctrl-e</li>
</ul>
<h3 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h3><ul>
<li>ctrl-l</li>
</ul>
<h3 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h3><ul>
<li>ctrl+insert</li>
</ul>
<h3 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h3><ul>
<li>shift+insert</li>
</ul>
<h3 id="回滚指令"><a href="#回滚指令" class="headerlink" title="回滚指令"></a>回滚指令</h3><ul>
<li>↑↓</li>
</ul>
<h1 id="linux注意"><a href="#linux注意" class="headerlink" title="linux注意"></a>linux注意</h1><p>输入行中的推退格：ctrl+backspace</p>
]]></content>
      <categories>
        <category>操作系统</category>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title>软工常识</title>
    <url>/posts/3289.html</url>
    <content><![CDATA[<h1 id="软件工程常识"><a href="#软件工程常识" class="headerlink" title="软件工程常识"></a>软件工程常识</h1><span id="more"></span>

<h2 id="大常识"><a href="#大常识" class="headerlink" title="大常识"></a>大常识</h2><h3 id="一、环境变量到底是什，为什么要配环境变量？"><a href="#一、环境变量到底是什，为什么要配环境变量？" class="headerlink" title="一、环境变量到底是什，为什么要配环境变量？"></a>一、环境变量到底是什，为什么要配环境变量？</h3><blockquote>
<p>环境变量包括用户变量和系统变量。</p>
</blockquote>
<ul>
<li><strong>用户变量</strong>是指我们当前登入这台电脑的用户，比如管理员用户，普通用户。在里面配置的环境变量，只对这个用户有效，一旦用户进行了更换，这环境变量将改为新登录用户的环境变量。</li>
<li><strong>系统变量</strong>是指这这台电脑的配置的环境变量，对所有用户都生效，不管你换哪个用户，都是生效的。</li>
</ul>
<blockquote>
<p>为什么要配置环境变量</p>
</blockquote>
<ul>
<li>windows系统下，假如我们安装了某一款软件，安装结束后，在安装目录会生成一个该软件的.exe文件，双击该文件，我们就能启动软件。但是难道我们每次要运行该软件的时候都要先找到该.exe文件所在的路径，然后双击吗，显然是不可能的，因为安装的软件太多，我们根本不可能记住所有已安装软件的路径，这时候就需要环境变量了。</li>
</ul>
<p>参考资料：</p>
<ul>
<li><p><a href="https://blog.csdn.net/u013201439/article/details/55657634?spm=1001.2101.3001.6661.1&utm_medium=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-55657634-blog-119698904.pc_relevant_3mothn_strategy_recovery&depth_1-utm_source=distribute.pc_relevant_t0.none-task-blog-2~default~CTRLIST~Rate-1-55657634-blog-119698904.pc_relevant_3mothn_strategy_recovery&utm_relevant_index=1">我们为什么要配置环境变量</a></p>
</li>
<li><p><a href="https://blog.csdn.net/adminZSQ/article/details/106396178">为什么要配置环境变量？变量是什么通俗解释</a></p>
</li>
</ul>
<hr>
<h3 id="二、压缩的原理"><a href="#二、压缩的原理" class="headerlink" title="二、压缩的原理"></a>二、压缩的原理</h3><hr>
<h2 id="小常识"><a href="#小常识" class="headerlink" title="小常识"></a>小常识</h2><h3 id="UID、PID和PPID"><a href="#UID、PID和PPID" class="headerlink" title="UID、PID和PPID"></a>UID、PID和PPID</h3><p>UID用户ID(user ID)，PID（process ID）：PID是程序被操作系统加载到内存成为进程后动态分配的资源。每次程序执行的时候，操作系统都会重新加载，PID在每次加载的时候都是不同的。PPID（parent process ID）：PPID是程序的父进程号</p>
<h3 id><a href="#" class="headerlink" title></a></h3>]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>常识</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown的基本用法</title>
    <url>/posts/42f0.html</url>
    <content><![CDATA[<h1 id="Markdown-学习"><a href="#Markdown-学习" class="headerlink" title="Markdown 学习"></a>Markdown 学习</h1><span id="more"></span>

<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><figure class="highlight clean"><table><tr><td class="code"><pre><span class="line"># 这样表示一级标题</span><br><span class="line">## 这样表示二级标题</span><br><span class="line">### 这样表示三级标题</span><br><span class="line">· · · · · ·</span><br></pre></td></tr></table></figure>

<blockquote>
<p><code>最多支持六级标题</code></p>
</blockquote>
<!--more-->

<hr>
<h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="strong">**这样表示粗体**</span></span><br></pre></td></tr></table></figure>

<p><strong>这样表示粗体</strong></p>
<figure class="highlight asciidoc"><table><tr><td class="code"><pre><span class="line"><span class="strong">*这样表示斜体*</span></span><br></pre></td></tr></table></figure>

<p><em>这样表示斜体</em></p>
<figure class="highlight haml"><table><tr><td class="code"><pre><span class="line">~~这样表示删除线~~</span><br></pre></td></tr></table></figure>

<p><del>这样表示删除线</del></p>
<hr>
<h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><figure class="highlight node-repl"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span> <span class="language-javascript">表示引用</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p> 表示引用</p>
</blockquote>
<hr>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>—或者***表示分割线</p>
<hr>
<h2 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h2><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><figure class="highlight scheme"><table><tr><td class="code"><pre><span class="line">[<span class="name">链接的名字</span>](<span class="name">我链接的地址</span>)</span><br></pre></td></tr></table></figure>

<p><a href="Zper99.github.io">链接的名字</a></p>
<h3 id="自动链接"><a href="#自动链接" class="headerlink" title="自动链接"></a>自动链接</h3><figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="section">&lt;我是自动链接&gt;</span></span><br></pre></td></tr></table></figure>

<p><a href="https://zper99.github.io/">https://zper99.github.io/</a></p>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>1. 我是有序列表</p>
<ol>
<li>我是有序列表</li>
<li>我也是有序列表</li>
</ol>
<p>- 我是无序列表</p>
<ul>
<li>我是无序列表</li>
<li>我也是无序列表</li>
</ul>
<hr>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><figure class="highlight gherkin"><table><tr><td class="code"><pre><span class="line">|<span class="string">top1</span>|<span class="string">top2</span>|<span class="string">top3</span>|</span><br><span class="line">|<span class="string">-  -</span>|<span class="string">-  -</span>|<span class="string">-  -</span>|</span><br><span class="line">|<span class="string">word</span>|<span class="string">word</span>|<span class="string">word</span>|</span><br><span class="line">|<span class="string">word</span>|<span class="string">word</span>|<span class="string">word</span>|</span><br><span class="line">|<span class="string">word</span>|<span class="string">word</span>|<span class="string">word</span>|</span><br></pre></td></tr></table></figure>



<table>
<thead>
<tr>
<th>top1</th>
<th>top2</th>
<th>top3</th>
</tr>
</thead>
<tbody><tr>
<td>word</td>
<td>word</td>
<td>word</td>
</tr>
<tr>
<td>word</td>
<td>word</td>
<td>word</td>
</tr>
<tr>
<td>word</td>
<td>word</td>
<td>word</td>
</tr>
</tbody></table>
<hr>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight autohotkey"><table><tr><td class="code"><pre><span class="line">```表示代码</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">表示代码</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="跳转"><a href="#跳转" class="headerlink" title="跳转"></a>跳转</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;span <span class="built_in">id</span>=<span class="string">&quot;tag1&quot;</span>&gt;我是指定位置&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">[跳转到指定位置](<span class="comment">#tag1)</span></span><br></pre></td></tr></table></figure>

<p><span id="tag1">我是指定位置</span></p>
<p><a href="#tag1">跳转到指定位置</a></p>
<hr>
<h2 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">details</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">summary</span>&gt;</span>你的问题?<span class="tag">&lt;/<span class="name">summary</span>&gt;</span></span><br><span class="line">你的答案:</span><br><span class="line"><span class="tag">&lt;/<span class="name">details</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><details>
<summary>你的问题?</summary>
你的答案:
</details></li>
</ul>
]]></content>
      <categories>
        <category>工具</category>
        <category>markdown文本编辑器</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Nginx</title>
    <url>/posts/248b.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>shell</title>
    <url>/posts/9924.html</url>
    <content><![CDATA[<h1 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h1><span id="more"></span>

<h2 id="概论"><a href="#概论" class="headerlink" title="概论"></a>概论</h2><ul>
<li><p>Shell是一个命令行的解释器，接收命令和执行命令。</p>
<p><img data-src="/posts/9924/image-20221020112932155.png" alt="image-20221020112932155"></p>
<p>是外部应用程序和linux内核的交流语言。</p>
<p>同时shell还是一个功能强大的编程语言，灵活性强，主要用于维护服务器。</p>
</li>
<li><p>shell脚本程序的后缀是.sh，不加也行但是约定俗成是.sh</p>
</li>
<li><p>脚本的第一句应该是#!&#x2F;bin&#x2F;bash指定语言解释器，bash</p>
</li>
<li><p>脚本命令的执行相当于是在&#x2F;bin&#x2F;bash下寻找匹配的指令，找到则执行，未找到则返回<img data-src="/posts/9924/image-20221020121721080.png" alt="image-20221020121721080"></p>
</li>
</ul>
<hr>
<h2 id="执行一个shell程序"><a href="#执行一个shell程序" class="headerlink" title="执行一个shell程序"></a>执行一个shell程序</h2><ol>
<li>用<code>bash  路径/xxx.sh</code></li>
<li>给sh脚本添加权限<code>chmod +x xxx.sh</code>， 则可以用绝对路径和相对路径执行，应该注意在当前目录执行则为<code>./xxx.sh</code></li>
<li>用<code>. xxx.sh/source xxx.sh</code>，相当于把脚本指令拿出来到shell命令行直接执行，其他方式相当于开了一个子shell命令行，然后再执行</li>
<li>退出一个shell脚本可以用exit，一般用于不满足条件的退出</li>
</ol>
<hr>
<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><ul>
<li><p>查看环境变量</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">env</span><br><span class="line">//查看全部环境变量</span><br><span class="line">echo $XXX</span><br><span class="line">//查看某个环境变量</span><br><span class="line">set</span><br><span class="line">//查找所有变量，包括自定义变量</span><br></pre></td></tr></table></figure>
</li>
<li><p>全局环境变量可以在所有的bash解释器中生效，而局部环境变量只能在当前bash解释器中生效。</p>
</li>
<li><p>将脚本文件路径配置为环境变量则可以把脚本文件按脚本指令执行，比如</p>
<p><img data-src="/posts/9924/image-20221020124401187.png" alt="image-20221020124401187"></p>
<p>把hello.sh移动到&#x2F;bin&#x2F;目录下，也可以把脚本文件移动到任何$PATH文件下，最好为&#x2F;root&#x2F;bin下面，而且&#x2F;bin&#x2F;是连接到&#x2F;usr&#x2F;bin下面</p>
</li>
</ul>
<hr>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><ol>
<li>定义变量：<code>xxx=xxx</code></li>
<li>定义全局变量：<code>export $xxx</code></li>
<li>撤销变量：<code>unset xxx</code></li>
<li>静态变量：<code>readonly xxx=xxx</code></li>
</ol>
<h3 id="变量定义规则"><a href="#变量定义规则" class="headerlink" title="变量定义规则"></a>变量定义规则</h3><ol>
<li>变量类型默认为字符串类型</li>
<li>如果变量中有空格，则用””或者’’括起来，’ ‘原封不动，” “会翻译其中变量</li>
<li>定义的是局部变量，不会在子shell和父shell中生效</li>
</ol>
<h3 id="特殊变量"><a href="#特殊变量" class="headerlink" title="特殊变量"></a>特殊变量</h3><ul>
<li><p>$num</p>
<p>输入的参数，1-9直接接用$1~$9,num大于10，则用${10}来表示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;$0&quot;</span><br><span class="line">echo &quot;$1&quot;</span><br><span class="line">echo &quot;参数个数为：$#&quot;</span><br><span class="line">[root@VM-12-13-centos ~]# ./hello.sh sda</span><br><span class="line">./hello.sh</span><br><span class="line">sda</span><br><span class="line">参数个数为：1</span><br><span class="line"><span class="meta prompt_">//$</span><span class="language-bash">0为脚本本身的名称</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>$#</p>
<p>获得输入参数的个数，可以用来判断输入参数是否符合要求</p>
</li>
<li><p>$*    获得所有参数，并且看作为一个整体</p>
<p>$@ 获得所有参数，并且看作一个数组</p>
</li>
<li><p>$?   获得最后一次执行命令的返回值，0为正常，其他是报错</p>
</li>
</ul>
<hr>
<h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><p>基本语法：</p>
<ul>
<li><p>$[表达式]</p>
</li>
<li><p>$((表达式))</p>
</li>
</ul>
<hr>
<h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><h3 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h3><ul>
<li><p>两种方式</p>
<p>一、</p>
<figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line"><span class="keyword">test </span>xxx xxx xxx</span><br><span class="line"><span class="keyword">test </span>$a = 20</span><br><span class="line">echo $?</span><br><span class="line">//相当于输入三个参数判断,真返回0假返回1</span><br></pre></td></tr></table></figure>

<p>二、</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="string">[ xxx xxx xxx ]</span></span><br><span class="line"><span class="string">[ $a = 20 ]</span></span><br><span class="line">echo $?</span><br><span class="line"><span class="comment">//原理同上，但是[]前后要有空格</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>大小判断比较</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-lt [ 10 -lt 20 ] leessthan</span><br><span class="line">-le [ 10 -le 10 ] lessequal</span><br><span class="line">-gt [ 20 -gt 10 ] greaterthan</span><br><span class="line">-ge [ 20 -ge 20 ] greaterequal</span><br><span class="line">-eq [ 10 -eq 10 ] equal</span><br><span class="line">-ne [ 10 -ne 10 ] notequal</span><br></pre></td></tr></table></figure>
</li>
<li><p>权限确认</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-r [ -r xxx ] read权限       文件可读</span><br><span class="line">-x [ -x xxx ] exection权限   文件可执行</span><br><span class="line">-w [ -w xxx ] write权限      文件可写</span><br><span class="line">-e [ -e xxx ] exit          文件存在</span><br><span class="line">-d [ -d xxx ] directory     文件存在并且是目录</span><br><span class="line">-z [ -z xxx ] 字符串是否为空</span><br></pre></td></tr></table></figure>
</li>
<li><p>多条件组合判断</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[] &amp;&amp; [] || []</span><br><span class="line">//短路与和短路或来组成多条件判断</span><br><span class="line">//[] &amp;&amp; 指令1 || 指令2，shell的三元判断写法</span><br><span class="line"></span><br><span class="line">[ 条件1 -a 条件2 ]    -a and</span><br><span class="line">[ 条件1 -o 条件2 ]    -o or</span><br><span class="line">//这种也可以进行条件判断</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="if判断"><a href="#if判断" class="headerlink" title="if判断"></a>if判断</h3><ul>
<li><p>单分支流程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [];then</span><br><span class="line">	order</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if []</span><br><span class="line">then</span><br><span class="line">	order</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>
</li>
<li><p>多分支流程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if [ ]</span><br><span class="line">then</span><br><span class="line">	order</span><br><span class="line">else </span><br><span class="line">	order</span><br><span class="line">fi</span><br><span class="line">//双分支</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">if []</span><br><span class="line">then</span><br><span class="line">	order</span><br><span class="line">elif []</span><br><span class="line">then</span><br><span class="line">	order</span><br><span class="line">else</span><br><span class="line">	order</span><br><span class="line">fi</span><br><span class="line">//多分支</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="case判断"><a href="#case判断" class="headerlink" title="case判断"></a>case判断</h3><ul>
<li><p>基本语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">case $num in</span><br><span class="line">num1)</span><br><span class="line">	order</span><br><span class="line">;;            //break</span><br><span class="line">num2)</span><br><span class="line">	order</span><br><span class="line">;;</span><br><span class="line">......</span><br><span class="line">*)            //default</span><br><span class="line">	order</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul>
<li><p>语法一</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for (( 初始值; 条件; 变化 ))</span><br><span class="line">//在这里条件可以用&lt;&gt;=来表示，且可以不空格</span><br><span class="line">do</span><br><span class="line">	order</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">num=0</span><br><span class="line">for (( i=1; i&lt;=$1; i=i+1 ))</span><br><span class="line">do</span><br><span class="line">	num=$[ $num + $i ]	</span><br><span class="line">done</span><br><span class="line">echo $num</span><br><span class="line">[root@VM-12-13-centos ~]# ./for_test.sh 6</span><br><span class="line">21</span><br><span class="line"></span><br></pre></td></tr></table></figure>
</li>
<li><p>语法二</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">for 变量 in 值1 值2 值3</span><br><span class="line">do</span><br><span class="line">	order</span><br><span class="line">done</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">num=0</span><br><span class="line">for a in a b c d e f g</span><br><span class="line">do</span><br><span class="line">	echo $a</span><br><span class="line">done</span><br><span class="line">[root@VM-12-13-centos ~]# ./for_test.sh </span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">c</span><br><span class="line">d</span><br><span class="line">e</span><br><span class="line">f</span><br><span class="line">g</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul>
<li><p>语句</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">while [ 条件 ]</span><br><span class="line">do</span><br><span class="line">	order</span><br><span class="line">done</span><br><span class="line">//必须在order里面给出值的变化</span><br></pre></td></tr></table></figure></li>
</ul>
<hr>
<h2 id="读取输入"><a href="#读取输入" class="headerlink" title="读取输入"></a>读取输入</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">read</span> -t num -p <span class="string">&quot;xxxxxxxxxx&quot;</span> var</span><br><span class="line">//-t等待时间</span><br><span class="line">//-p提示文字</span><br><span class="line">//var储存变量</span><br><span class="line"></span><br><span class="line"><span class="comment">#!/bin/bash</span></span><br><span class="line"><span class="built_in">read</span> -t 10 -p <span class="string">&quot;请输入你喜欢的人： &quot;</span> loper</span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$loper</span> 是最漂亮的人&quot;</span></span><br><span class="line">[root@VM-12-13-centos ~]<span class="comment"># ./for_test.sh </span></span><br><span class="line">请输入你喜欢的人： yp</span><br><span class="line">yp 是最漂亮的人</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="系统函数"><a href="#系统函数" class="headerlink" title="系统函数"></a>系统函数</h3><ul>
<li><p>在linux下的所有命令都可以作为函数来使用</p>
</li>
<li><p>需要用命令替换来调用$(       )</p>
</li>
<li><p>两个常用函数的实例</p>
</li>
</ul>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line"><span class="regexp">//</span>basename</span><br><span class="line">basename <span class="regexp">/xxx/</span>xxx/xxx 后缀</span><br><span class="line"><span class="regexp">//</span>则可以得到不含后缀的文件名称</span><br><span class="line">$(basenaem <span class="variable">$0</span> .sh)</span><br><span class="line"></span><br><span class="line"><span class="regexp">//</span>dirname</span><br><span class="line">dirname <span class="regexp">/xxx/</span>xxx/xxx</span><br><span class="line">$(dirname <span class="variable">$0</span>)</span><br><span class="line"><span class="regexp">//</span>获取i相对路径</span><br><span class="line">$(cd $(dirname <span class="variable">$0</span>); pwd)</span><br><span class="line"><span class="regexp">//</span>获取绝对路径</span><br></pre></td></tr></table></figure>



<h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p>基本语法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[function] funname()&#123;</span><br><span class="line">	order</span><br><span class="line">	[return xxx]</span><br><span class="line">&#125;</span><br><span class="line">//[代表可以省略]，一般都要省略</span><br><span class="line">//而且一般用echo来返回值</span><br><span class="line"></span><br><span class="line">add()&#123;</span><br><span class="line">	a=$[$1 + $2]</span><br><span class="line">	echo $a</span><br><span class="line">&#125;</span><br><span class="line">read a</span><br><span class="line">read b</span><br><span class="line">c=$(add $a $b)</span><br><span class="line">echo $c</span><br></pre></td></tr></table></figure>

<p>要求</p>
<ul>
<li>需要先声明函数，也就是放在前面&#x2F;&#x2F;因为没有编译的过程</li>
<li>return的值用$?获得，范围为0~255，所有不用这种方法</li>
</ul>
<hr>
<h2 id="定时任务"><a href="#定时任务" class="headerlink" title="定时任务"></a>定时任务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -l</span><br><span class="line">//查看所有的定时脚本</span><br><span class="line">crontab -e</span><br><span class="line">//edit,编辑一个定时脚本</span><br><span class="line"></span><br><span class="line">*  *  *  *   *</span><br><span class="line">分 时 天  月 星期</span><br><span class="line">0 2 * * * /root/zper.sh 参数</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="正则表达式-入门"><a href="#正则表达式-入门" class="headerlink" title="正则表达式(入门)"></a>正则表达式(入门)</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul>
<li>用于匹配复杂的字符，①对目的文件进行模糊的搜索，②对输入的模糊的判断，比如手机号码银行号码是否正确，③对某些文本进行替换</li>
<li>linux中，grep，sed，awk等支持正则表达式</li>
</ul>
<h3 id="常规匹配"><a href="#常规匹配" class="headerlink" title="常规匹配"></a>常规匹配</h3><ul>
<li><p>直接给出关键字</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /xxx/xxx | grep xxx</span><br><span class="line">//匹配所有含xxx的行</span><br></pre></td></tr></table></figure>
</li>
<li><p>常用特殊字符</p>
</li>
<li><ol>
<li><p>^和$</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /xxx/xxx | grep ^xxx</span><br><span class="line">//匹配以xxx开头的行</span><br><span class="line">cat /xxx/xxx | grep xxx$</span><br><span class="line">//匹配以xxx结尾的行</span><br><span class="line">cat /xxx/xxx | grep ^xxx$</span><br><span class="line">//匹配为xxx的行</span><br><span class="line">cat /xxx/xxx | grep ^$</span><br><span class="line">//匹配空行</span><br></pre></td></tr></table></figure>
</li>
<li><p>.和*</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /xxx/xxx | grep x..x</span><br><span class="line">//..代表两个任意字符</span><br><span class="line">cat /xxx/xxx | grep a*b</span><br><span class="line">//*匹配和上个字符一样的字符任意次，ab，aab，aaab</span><br><span class="line">cat /xxx/xxx | grep a.*b</span><br><span class="line">//匹配任意字符a......b</span><br><span class="line">cat /xxx/xxx | grep ^a.*b$</span><br><span class="line">//匹配以a开头以b结尾的行</span><br><span class="line">cat /xxx/xxx | grep ^a.*c.*b$</span><br><span class="line">//匹配以a开头以b结尾之间出现过c的行</span><br></pre></td></tr></table></figure>
</li>
<li><p>[]字符区间匹配</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[6,8]6或者8</span><br><span class="line">[1-9]1到9</span><br><span class="line">[1-9]*1到9重复多次</span><br><span class="line">[a-z]a到z</span><br><span class="line">[a-z]*a到z重复多次</span><br><span class="line">[1-4,8-9]1到4，8到9</span><br><span class="line">[a-g,t-z]a到g，t到z</span><br></pre></td></tr></table></figure>
</li>
<li><p>\转义匹配</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat /xxx/xxx | grep &#x27;\$&#x27;</span><br><span class="line">//匹配有$的行</span><br></pre></td></tr></table></figure></li>
</ol>
</li>
</ul>
<hr>
<h2 id="文本处理工具"><a href="#文本处理工具" class="headerlink" title="文本处理工具"></a>文本处理工具</h2><h3 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h3><ul>
<li><p>基本用法</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">cut [-df] filename</span><br><span class="line"></span><br><span class="line">cut -d <span class="string">&quot; &quot;</span> filename</span><br><span class="line"><span class="regexp">//</span>-d 指定分割符号,以空格分隔</span><br><span class="line">cut -d <span class="string">&quot; &quot;</span> -f <span class="number">2</span>，<span class="number">3</span> filename</span><br><span class="line"><span class="regexp">//</span>-f 指定输出列号</span><br><span class="line"><span class="regexp">//</span>x- 指定输出x行和x行以后的列，-x同理</span><br><span class="line"><span class="regexp">//</span>x-y指定输出x到y列的值</span><br></pre></td></tr></table></figure>
</li>
<li><p>管道用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cat xxx | grep 正则筛选 | cut -d &quot; &quot; -f 3 </span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h3><ul>
<li><p>可以配合管道使用</p>
</li>
<li><p>基本用法</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">awk [-Ffv] &#x27;/正则筛选/&#123;order&#125;&#x27;&#x27;order&#x27;.... filename</span><br><span class="line">//可以有多个order</span><br><span class="line">awk -F &quot; &quot; &#x27;/^root/&#123;print $1&#125;&#x27; filename</span><br><span class="line">//-F切割符号,在root开头的行切割出以&quot; &quot;的第一列</span><br><span class="line">awk -F &quot; &quot; &#x27;/^root/&#123;print $1&quot;,&quot;$7&#125;&#x27; filename</span><br><span class="line">//在第一列和第七列中加“，”</span><br><span class="line">awk -F &quot; &quot; &#x27;BEGIN&#123;print &quot;user:&quot;&#125;&#x27;&#x27;&#123;print $1&#125;&#x27;&#x27;END&#123;print&#125;&#x27; filename</span><br><span class="line">//BEGIN和END指定了order在哪里生效的特殊用法</span><br><span class="line">awk -F &quot; &quot; -v i=2 &#x27;&#123;print $1+i&#125;&#x27; filename</span><br><span class="line">//-v赋值一个用户定义变量，避免对order进行修改</span><br><span class="line">awk -F &quot; &quot; &#x27;&#123;print FILENAME&quot;&quot;$1&quot;&quot;NR&quot;&quot;NF&#125;&#x27; filename</span><br><span class="line">//FILENAME,NR,NF是系统自带的文件名，该行号，列总数</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>语言</category>
        <category>脚本语言</category>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>语言</tag>
        <tag>脚本语言</tag>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>YPYYDS</title>
    <url>/posts/777d.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">
  <script id="hbeData" type="hbeData" data-hmacdigest="cb00674ea3752b6531abd65d7a16e5882b50dc2e38b66d0688ea9e418a283369">031d3b5b4d592184d46d63e8ce614d5552b6986bb991c00793a4f65860501ca2e94f87476936a541f2eecf379e5a89d93aaa03a7fdc3ee8d7ac1a9fb70c6e0664f77c9c9588d8ede3c3b567225fa5466a16dddd33e1ba3f5d5d4944d1d591dbe6fb219c6c701ed1ce83d21ee5e130fffb0b763107adebff6e0871b1bddc3948931eb9091bac944e27f36e6a63b7c3fbd0eca3145318e7644e592985b1f3ab182b990434797df51a05905c0c9908789065c0f8a70e7b617daf44c7fdfeb13355bd5f9cf0a71eb6b14d1251efe1386768b6a844e5b95b2bc0199222e7ee1a200853076c46063b0bdfbaa250a0c284050185831c1415441736c7b9a85816fd6d88b2012412ead6eccb54c4a7717e47aa1a5e599bc7b6bc69ac92b20b90a4553a911dea492bcd2216c5df967fd482cab26adef1ffa1225c4d0f8f0270e1eaeb6bf73d443e478c95922b900e67c264e583dee5be4d3eaa5d0630b9144e269db3865051bad0bf4623631c5ee4348460737977e48a0e4a5923a341a87018feb659a9d3a9fd644bfe33f2e0dad85d0387db4fcf64cd2e84cb6790a8167f51f310d23916d72889db6025491fab1a5f950dcdf34bd9308f57ee433b6e0b0df448b2679ef7c56303f6a94a48b92dd4117a1a3ea6eca4bedd4490a74a4637c3f728631a296a5864dafeab181c88076635b007a67d162074995750721a2596ac4e171d5211c4259e09f26dca7c1bc98ceb482fddd3d8fb6fdfb4ea973caabff7e9b8c79d73b9fe80ebe7490bd06aa7454e6dab2292cafa2a93614adc6195b02f457c0f126725b0ffb721b004cf929e12065ae8393f336b6f38e151d107d06c2e72a88f92250f0851138db44e58cdb77a8686cd956310c4ae094ec25ebcb50b833f0423ac3db28c51caa1c6c12dda31816f6ef847d9dbe7922f85174dec4308676ea1f2e7dac1e9829b1ba874206b369ffbee707e2f11fa1fdd0249a5d77c123de6dd7092df5314d5ca1dc537ad2d18635e2fbfe335052596fd3f4ee870c776ecf7c6f6398e8132998029ad6f80159ae9fdbc13c70e850c94654e1d3aa818cf736ba248bf26f11d268876d4ed39f9e12148dcc9fd39976b6910825c3527d43006411631d3d5dad6969dedbf29ea17d8b6f91292d791e74239b6fbbc171b9581acda149b537bc225155a8e54b78fdc476b8c891829027fbc2fb18b7626dda8c0253eff292f25eb17ddadc8e6409aace06d06f12c44f50a042dc5e1dd010a031cd2a06cb0167d793ae4643ec896855399901bbafb27ddc274f56bd70550a47d152690e861a1ede5aa2e7fbd929df78726210379c1a4ce74198bfcf08248bc66d01d0285595e1c773512881da37facb3fc4f65aadd748f1ae9de478d87c4339151f8bd437cd48b11f83821838d92add026f9a7c592e222078b554b8328c928a833300788f021598e2</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">Hey, password is required here.</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>博客搭建</title>
    <url>/posts/68d0.html</url>
    <content><![CDATA[<h1 id="第一部分-搭建与发布"><a href="#第一部分-搭建与发布" class="headerlink" title="第一部分 搭建与发布"></a>第一部分 搭建与发布</h1><span id="more"></span>



<h2 id="1、安装Git"><a href="#1、安装Git" class="headerlink" title="1、安装Git"></a>1、安装Git</h2><p><code>Git</code>是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。<br>可以到<a href="https://git-scm.com/download/win">Git官网</a>进行下载，Git详细安装教程可以查看<a href="https://blog.csdn.net/qq_43715354/article/details/108638061">Git安装</a>。</p>
<hr>
<h2 id="2、安装VSCode"><a href="#2、安装VSCode" class="headerlink" title="2、安装VSCode"></a>2、安装VSCode</h2><p><code>VSCode</code> ，是微软出的一款轻量级代码编辑器，免费、开源而且功能强大，一般为前端代码开发IDE。<br>可以到<a href="https://code.visualstudio.com/Download">VSCode官网</a>进行下载，VSCode详细安装教程可以查看<a href="https://zhuanlan.zhihu.com/p/264785441">VSCode安装</a>。</p>
<hr>
<h2 id="3、安装Node-js"><a href="#3、安装Node-js" class="headerlink" title="3、安装Node.js"></a>3、安装Node.js</h2><p><code>Node.js</code> 是一个 JavaScript 运行环境。Node.js 的包管理器 npm，是全球最大的开源库生态系统。<br>可以到<a href="http://nodejs.cn/download/">Node官网</a>进行下载，Node详细安装教程可以查看<a href="https://www.bilibili.com/video/BV1VK4y1v7TK">Node.js安装</a>。</p>
<hr>
<h2 id="4、安装Hexo"><a href="#4、安装Hexo" class="headerlink" title="4、安装Hexo"></a>4、安装Hexo</h2><p><code>Hexo</code>是一个快速、简洁且高效的博客框架，让上百个页面在几秒内瞬间完成渲染。<br>创建一个博客文件夹，右键<code>Git Bash Here</code>，输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>

<p>安装Hexo，然后使用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>

<p>如果链接出错，则关闭vpn用热点多试几次</p>
<p>初始化一个hexo项目。初始化完成后，执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure>

<p>若能够在浏览器中通过<code>localhost:4000</code>访问到项目，hexo就安装成功了。</p>
<hr>
<h2 id="5、注册Github账号创建个人仓库"><a href="#5、注册Github账号创建个人仓库" class="headerlink" title="5、注册Github账号创建个人仓库"></a>5、注册Github账号创建个人仓库</h2><p>新建一个仓库，仓库名字有一定的规范要求。例如我的Github名字叫Zper99，那么在填写仓库名的时候就是<code>Zper99.github.io</code>。这样就完成了个人仓库的创建。</p>
<hr>
<h2 id="6、生成ssh密钥添加到Github"><a href="#6、生成ssh密钥添加到Github" class="headerlink" title="6、生成ssh密钥添加到Github"></a>6、生成ssh密钥添加到Github</h2><p>这一步的目的是可以使用Github的ssh地址pull、push仓库。设置使用ssh密钥的好处是可以使用ssh连接，提交代码的时候可以不用输入密码，免密提交。<br><code>Github</code>下载代码有三种方式，<code>http</code>下载、<code>ssh</code>下载、<code>zip</code>下载，到个人仓库页面就可以看到这三种下载方式。<br>​在本地博客文件夹中右键选择<code>Git Bash Here</code>调出命令行，输入以下命令：</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.name</span> <span class="string">&quot;YourGithubName&quot;</span>		</span><br><span class="line"><span class="comment">//双引号内填写你的GitHub用户名</span></span><br><span class="line">git config <span class="attr">--global</span> user<span class="selector-class">.email</span> <span class="string">&quot;YourGithubEmail&quot;</span>	</span><br><span class="line"><span class="comment">//双引号内填写你的Github个人邮箱</span></span><br></pre></td></tr></table></figure>

<p>然后输入以下命令生成SSH密钥：</p>
<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;YourGithubEmail&quot;</span>		</span><br><span class="line"><span class="regexp">//</span>双引号内填写你的Github个人邮箱</span><br></pre></td></tr></table></figure>

<p>然后找到这个路径下的密匙文件”C:\Users\张皓庭.ssh\id_rsa.pub”<code>ctrl+a</code> <code>ctrl+c</code>全选复制后打开Github，点击头像在选项卡中找到Setting设置选项，再点击SSH and GPG keys，新建一个SSH，命名随意，将刚才再Git输入框中复制的密钥粘贴在此处，点击保存。</p>
<p>然后回到Git命令行，输入以下命令：</p>
<figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line">ssh -T <span class="symbol">git@</span>github.com		</span><br><span class="line"></span><br><span class="line"><span class="comment">//查看本地是否与Github连接成功</span></span><br></pre></td></tr></table></figure>

<p>如果出现自己的用户名，那就已经将本地环境与Github连接成功，以后就可以通过ssh的方式提交代码，一劳永逸。</p>
<hr>
<h2 id="7、修改Hexo配置文件"><a href="#7、修改Hexo配置文件" class="headerlink" title="7、修改Hexo配置文件"></a>7、修改Hexo配置文件</h2><p>在 Hexo 中有两份主要的配置文件，其名称都是<code> _config.yml</code>。 其中，一份位于站点根目录下，主要包含 Hexo 本身的全局配置；另一份位于<code>themes</code>目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为 全局配置文件， 后者称为 主题配置文件。</p>
<p>打开全局配置文件，修改配置信息：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">deploy:</span></span><br><span class="line"><span class="symbol">  type:</span> git</span><br><span class="line"><span class="symbol">  repository:</span> ssh仓库地址</span><br><span class="line"><span class="symbol">  branch:</span> master</span><br></pre></td></tr></table></figure>

<p>在repository仓库中填上刚才申请的个人仓库的ssh地址，branch分支填上主分支，保存即可。</p>
<hr>
<h2 id="8、Hexo项目映射到Github仓库"><a href="#8、Hexo项目映射到Github仓库" class="headerlink" title="8、Hexo项目映射到Github仓库"></a>8、Hexo项目映射到Github仓库</h2><p>完成Hexo配置后，就可以在当前项目的集成终端执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>初始化一个git项目。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">git remote add origin ssh地址</span><br><span class="line"></span><br><span class="line">//ssh地址即为刚才申请的个人仓库的ssh地址</span><br></pre></td></tr></table></figure>

<p>在使用Hexo部署博客之前，需要先安装一个依赖，这个依赖会将我们生成好的代码部署到一个具体的分支，执行命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git</span><br></pre></td></tr></table></figure>

<p>安装依赖。然后部署</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo d</span><br><span class="line">//deploy</span><br></pre></td></tr></table></figure>

<p>即完成Hexo部署到Github。Zper99.github.io即为博客项目的访问地址。</p>
<h1 id="第二部分-Next主题配置美化"><a href="#第二部分-Next主题配置美化" class="headerlink" title="第二部分 Next主题配置美化"></a>第二部分 Next主题配置美化</h1><blockquote>
<p>在Github开源了许多关于Hexo的博客主题，因为个人比较喜欢简约风格，在进行多番对比后，最终选择Next作为个人博客网站的主题。</p>
</blockquote>
<h2 id="Hexo相关介绍"><a href="#Hexo相关介绍" class="headerlink" title="Hexo相关介绍"></a>Hexo相关介绍</h2><h3 id="1、Hexo目录构成"><a href="#1、Hexo目录构成" class="headerlink" title="1、Hexo目录构成"></a>1、Hexo目录构成</h3><blockquote>
<p>node_modules：里面存放Node.js各种库的目录</p>
<p>public：生成网页的文件目录</p>
<p>scaffolds：存放新文章和新页面的初始设置</p>
<p>source：存放文章，各类页面，图像等文件</p>
<p>themes：存放着主题文件</p>
<p>_config.yml：站点配置文件</p>
</blockquote>
<h3 id="2、更换主题"><a href="#2、更换主题" class="headerlink" title="2、更换主题"></a>2、更换主题</h3><p>Hexo有着自己的开源主题库，我们需要去下载Next主题。</p>
<p>在集成终端，也就是博客根目录，执行<code>git clone git@github.com:theme-next/hexo-theme-next.git themes/next</code>，下载完成后，删除next文件夹中的<code>.git</code>和<code>.gitigore</code>文件，因为博客文件夹不能有两个git管理。<br>修改站点配置文件：<code>theme: next</code> 执行<code>hexo server</code>，本地的个人博客网站已经更换为Next主题。</p>
<h3 id="3、Next目录构成"><a href="#3、Next目录构成" class="headerlink" title="3、Next目录构成"></a>3、Next目录构成</h3><blockquote>
<p>languages：语言 [通常保存本网站支持的语言设置和支持]</p>
<p>layout：布局文件[通常此文件中添加或者删除一些小功能]</p>
<p>pages：页面文件</p>
<p>scripts：脚本文件 [存放一些JavaScript脚本文件]</p>
<p>sources：资源文件 [存放一些图片,特效之类的文件]</p>
<p><em>config.yml：主题配置文件</em></p>
<p>static_prefix.yml：静态网页参数</p>
</blockquote>
<h2 id="主题配置美化"><a href="#主题配置美化" class="headerlink" title="主题配置美化"></a>主题配置美化</h2><blockquote>
<p>网上Next主题的配置大多为next5.+或next6.+，在Next 7.8.0中对之前的版本进行了高度的插件化，许多功能都集成在主题配置文件中，同时之前自定义样式配置文件的路径也有所改变，针对于此写下自己的配置记录。</p>
</blockquote>
<h3 id="1、设置博主文字描述和中文语言"><a href="#1、设置博主文字描述和中文语言" class="headerlink" title="1、设置博主文字描述和中文语言"></a>1、设置博主文字描述和中文语言</h3><p>站点配置文件修改Site：</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Site</span></span><br><span class="line"><span class="symbol">title:</span> zper笔记</span><br><span class="line"><span class="symbol">subtitle:</span> 回忆和复述是最好的学习！</span><br><span class="line"><span class="symbol">description:</span> i love coding</span><br><span class="line"><span class="symbol">keywords:</span></span><br><span class="line"><span class="symbol">author:</span> zper</span><br><span class="line"><span class="symbol">language:</span> <span class="built_in">zh</span>-CN</span><br><span class="line"><span class="symbol">timezone:</span> <span class="string">&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>

<p>在vscode右下角把GBK更改为UTF-8</p>
<h3 id="2、设置Next主题样式"><a href="#2、设置Next主题样式" class="headerlink" title="2、设置Next主题样式"></a>2、设置Next主题样式</h3><p>Next提供了四种主题样式，根据个人的喜好选择即可。</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta">#Schemes</span></span><br><span class="line"><span class="meta">#scheme: Muse</span></span><br><span class="line"><span class="meta">#scheme: Mist</span></span><br><span class="line"><span class="meta">#scheme: Pisces</span></span><br><span class="line"><span class="symbol">scheme:</span> Gemini</span><br></pre></td></tr></table></figure>

<h3 id="3、设置博客文章持久化链接"><a href="#3、设置博客文章持久化链接" class="headerlink" title="3、设置博客文章持久化链接"></a>3、设置博客文章持久化链接</h3><p>发布博客后，它的默认url地址是带中文的，并且进行了多层分级，非常复杂，因此需要安装这个插件简化url。</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-abbrlink <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>全局配置文件修改permalink添加修改为如下内容：</p>
<figure class="highlight oxygene"><table><tr><td class="code"><pre><span class="line">url: https:<span class="comment">//Zper99.github.io/</span></span><br><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">    alg: crc16</span><br><span class="line">    rep: hex</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">&#x27;index.html&#x27;</span> <span class="keyword">from</span> permalinks</span><br><span class="line">  trailing_html: <span class="keyword">true</span> # <span class="keyword">Set</span> <span class="keyword">to</span> <span class="keyword">false</span> <span class="keyword">to</span> <span class="keyword">remove</span> trailing <span class="string">&#x27;.html&#x27;</span> <span class="keyword">from</span> permalinks</span><br></pre></td></tr></table></figure>

<h3 id="4、Menu添加关于、标签、分类页面"><a href="#4、Menu添加关于、标签、分类页面" class="headerlink" title="4、Menu添加关于、标签、分类页面"></a>4、Menu添加关于、标签、分类页面</h3><p>主题配置文件修改menu，将about、tags、categories前的#号去掉，示例如下：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">menu:</span></span><br><span class="line"><span class="symbol">  home:</span> / || fa fa-home</span><br><span class="line"><span class="symbol">  about:</span> <span class="keyword">/about/</span> || fa fa-user</span><br><span class="line"><span class="symbol">  tags:</span> <span class="keyword">/tags/</span> || fa fa-tags</span><br><span class="line"><span class="symbol">  categories:</span> <span class="keyword">/categories/</span> || fa fa-th</span><br></pre></td></tr></table></figure>

<p>新建相关页面</p>
<figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">&quot;about&quot;</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="string">&quot;categories&quot;</span></span><br></pre></td></tr></table></figure>

<p>修改生成页面的配置<br>source&#x2F;about&#x2F;index.md<br>source&#x2F;tags&#x2F;index.md<br>source&#x2F;categories&#x2F;index.md</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">关于</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;about&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">标签</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;tags&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">分类</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">&quot;categories&quot;</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="5、添加搜索功能"><a href="#5、添加搜索功能" class="headerlink" title="5、添加搜索功能"></a>5、添加搜索功能</h3><p>安装exo-generator-searchdb这个插件</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>全局配置文件添加</p>
<figure class="highlight avrasm"><table><tr><td class="code"><pre><span class="line"><span class="meta"># Search</span></span><br><span class="line"><span class="symbol">search:</span></span><br><span class="line"><span class="symbol">path:</span> search.xml</span><br><span class="line"><span class="symbol">field:</span> post</span><br><span class="line"><span class="symbol">format:</span> html</span><br><span class="line"><span class="symbol">limit:</span> <span class="number">10000</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;主题配置文件：打开&#x3D;&#x3D;</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"></span><br><span class="line">       <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="6、对于网站样式的自定义"><a href="#6、对于网站样式的自定义" class="headerlink" title="6、对于网站样式的自定义"></a>6、对于网站样式的自定义</h3><p>在博客根目录下的source文件夹下新建<code>_data</code>文件夹并添加<code>styles.styl</code>文件，  就可以对网站样式进行自定义，并且在主题配置文件中&#x3D;&#x3D;取消&#x3D;&#x3D;<code>custom_file_path</code>中 <code># style: source/_data/styles.styl</code>的注释<br>以我的个人博客为例，我做了如下自定义样式：修改链接样式、去掉顶部黑线、修改选中字符的颜色、修改代码块选中的颜色、修改引用样式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 修改链接样式</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff106c</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>, <span class="selector-tag">span</span><span class="selector-class">.exturl</span> &#123;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  &amp;<span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff106c</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  //去掉顶部黑线：</span><br><span class="line"><span class="selector-class">.headband</span> &#123;<span class="attribute">display</span>:none;&#125;</span><br><span class="line"></span><br><span class="line">// 修改选中字符的颜色</span><br><span class="line"><span class="comment">/* webkit, opera, IE9 */</span></span><br><span class="line"><span class="selector-pseudo">::selection</span> &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f7f7f7</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* firefox */</span></span><br><span class="line">::-moz-selection &#123; </span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f7f7f7</span>;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 代码块选中颜色</span><br><span class="line"><span class="selector-class">.highlight</span> *<span class="selector-pseudo">::selection</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#00c4b6</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//修改引用样式</span><br><span class="line"><span class="selector-tag">blockquote</span> &#123;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="number">4px</span> solid <span class="number">#f27c8d</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="7、设置侧栏阅读进度百分比"><a href="#7、设置侧栏阅读进度百分比" class="headerlink" title="7、设置侧栏阅读进度百分比"></a>7、设置侧栏阅读进度百分比</h3><p>编辑主题配置文件，修改 back2top 部分如下</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="8、设置字数统计和预计阅读时间"><a href="#8、设置字数统计和预计阅读时间" class="headerlink" title="8、设置字数统计和预计阅读时间"></a>8、设置字数统计和预计阅读时间</h3><p>在博客根目录下安装插件：</p>
<figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-<span class="built_in">count</span>-<span class="built_in">time</span> <span class="comment">--save</span></span><br></pre></td></tr></table></figure>

<p>编辑全局配置文件，添加如下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#文章、站点字数统计</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span>                <span class="comment"># 文章字数统计</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span>                   <span class="comment"># 文章阅读时长</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">true</span>          <span class="comment"># 站点总字数统计</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">true</span>             <span class="comment"># 站点总阅读时长</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span>     <span class="comment"># 排除代码字数统计</span></span><br></pre></td></tr></table></figure>

<p>修改主题配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span>     <span class="comment"># 是否另起一行（true的话不和发表时间等同一行）</span></span><br><span class="line">  <span class="attr">item_text_post:</span> <span class="literal">true</span>     <span class="comment"># 首页文章统计数量前是否显示文字描述（本文字数、阅读时长）</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">true</span>   <span class="comment"># 页面底部统计数量前是否显示文字描述（站点总字数、站点阅读时长）</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">4</span>                   <span class="comment"># Average Word Length</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">275</span>                 <span class="comment"># Words Per Minute（每分钟阅读词数）</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">mins.</span></span><br></pre></td></tr></table></figure>

<p>如果出现NAN:乱码，需要执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo s</span><br></pre></td></tr></table></figure>

<h3 id="9、网站底部添加网站运行时间"><a href="#9、网站底部添加网站运行时间" class="headerlink" title="9、网站底部添加网站运行时间"></a>9、网站底部添加网站运行时间</h3><p>修改主题下layout&#x2F;_partials&#x2F;footer.swig，在{ {- next_inject(‘footer’) } }上方添加如下内容：&#x3D;&#x3D;月&#x2F;日&#x2F;年&#x3D;&#x3D;</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 网站运行时间的设置 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;08/10/2021 12:00:00&quot;</span>);<span class="comment">//此处修改你的建站时间或者网站上线时间,月/日/年</span></span></span><br><span class="line"><span class="language-javascript">        now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>()+<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(days);</span></span><br><span class="line"><span class="language-javascript">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours);</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span>(<span class="title class_">String</span>(hnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum);</span></span><br><span class="line"><span class="language-javascript">        mnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes); <span class="keyword">if</span>(<span class="title class_">String</span>(mnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125;</span></span><br><span class="line"><span class="language-javascript">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum);</span></span><br><span class="line"><span class="language-javascript">        snum = <span class="title class_">Math</span>.<span class="title function_">round</span>(seconds); <span class="keyword">if</span>(<span class="title class_">String</span>(snum).<span class="property">length</span> ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeDate&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;times&quot;</span>).<span class="property">innerHTML</span> = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒&quot;</span>;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="10、添加自定义404页面"><a href="#10、添加自定义404页面" class="headerlink" title="10、添加自定义404页面"></a>10、添加自定义404页面</h3><figure class="highlight haxe"><table><tr><td class="code"><pre><span class="line">hexo <span class="keyword">new</span> <span class="type">page</span> <span class="number">404</span></span><br></pre></td></tr></table></figure>

<p>编辑新建的页面文件，默认在站点根目录下 &#x2F;source&#x2F;404&#x2F;index.md</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="number">404</span></span><br><span class="line"><span class="attr">comments:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/404</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="string">&lt;center&gt;对不起，您所访问的页面不存在或者已删除&lt;/center&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">*</span> [<span class="string">click</span> <span class="string">here</span>]<span class="string">(https://yuumiy.github.io/)</span> <span class="string">返回首页</span></span><br><span class="line"><span class="string">*</span> <span class="string">我的Github：[https://github.com/yuumiy](https://github.com/yuumiy)</span></span><br></pre></td></tr></table></figure>

<h3 id="11、添加图片放大预览功能"><a href="#11、添加图片放大预览功能" class="headerlink" title="11、添加图片放大预览功能"></a>11、添加图片放大预览功能</h3><p>在主题配置文件，启用 fancybox，修改配置如下：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">fancybox:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="12、隐藏网页底部-powered-By-Hexo-x2F-强力驱动"><a href="#12、隐藏网页底部-powered-By-Hexo-x2F-强力驱动" class="headerlink" title="12、隐藏网页底部 powered By Hexo &#x2F; 强力驱动"></a>12、隐藏网页底部 powered By Hexo &#x2F; 强力驱动</h3><p>修改主题配置文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">powered:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<h3 id="13、网页底部添加动态桃心"><a href="#13、网页底部添加动态桃心" class="headerlink" title="13、网页底部添加动态桃心"></a>13、网页底部添加动态桃心</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">icon:</span></span><br><span class="line">    <span class="attr">animated:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="14、图片懒加载设置"><a href="#14、图片懒加载设置" class="headerlink" title="14、图片懒加载设置"></a>14、图片懒加载设置</h3><p>在主题配置文件中启用lazyload</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">lazyload:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="15、设置标题栏背景图片"><a href="#15、设置标题栏背景图片" class="headerlink" title="15、设置标题栏背景图片"></a>15、设置标题栏背景图片</h3><p>博客根目录下的source&#x2F;_data&#x2F;styles.styl文件，添加如下代码：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 标题栏背景图片</span><br><span class="line"><span class="selector-class">.site-brand-container</span> &#123; </span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">/images/bg.png</span>);</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>&#x2F;images&#x2F;bg.png指的是themes目录下public&#x2F;images&#x2F;下的图片</p>
<h3 id="16、修改文章底部tag标签"><a href="#16、修改文章底部tag标签" class="headerlink" title="16、修改文章底部tag标签"></a>16、修改文章底部tag标签</h3><p>把文章底部#标签改为图标，在主题配置文件中修改：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">tag_icon:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="17、设置头像"><a href="#17、设置头像" class="headerlink" title="17、设置头像"></a>17、设置头像</h3><p>在主题配置文件中修改avatar</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="string">/images/avatar.png</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be dispalyed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<p>&#x2F;images&#x2F;avatar.png指的是themes目录下public&#x2F;images&#x2F;下的图片</p>
<h3 id="18、网站底部加上访问量"><a href="#18、网站底部加上访问量" class="headerlink" title="18、网站底部加上访问量"></a>18、网站底部加上访问量</h3><p>修改主题下layout&#x2F;_partials&#x2F;footer.swig，在{ {- next_inject(‘footer’) } }上方添加如下内容：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>	</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>总访客&amp;nbsp<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp人<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-item-icon&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-eye&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>总访问量&amp;nbsp<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>&amp;nbsp次<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="19、顶部阅读进度条"><a href="#19、顶部阅读进度条" class="headerlink" title="19、顶部阅读进度条"></a>19、顶部阅读进度条</h3><p>主题配置文件中修改 reading_progress 选项</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">reading_progress:</span></span><br><span class="line"><span class="symbol">  enable:</span> true</span><br><span class="line">  <span class="meta"># 显示在顶部</span></span><br><span class="line"><span class="symbol">  position:</span> top</span><br><span class="line"><span class="symbol">  color:</span> <span class="string">&quot;#06d633&quot;</span></span><br><span class="line"><span class="symbol">  height:</span> <span class="number">3</span>px</span><br></pre></td></tr></table></figure>

<h3 id="20、设置网站图标"><a href="#20、设置网站图标" class="headerlink" title="20、设置网站图标"></a>20、设置网站图标</h3><p>在主题配置文件中修改favicon</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="meta"># 填写自己的图片</span></span><br><span class="line"><span class="symbol">favicon:</span></span><br><span class="line"><span class="symbol">  small:</span> <span class="keyword">/images/</span>favicon.png</span><br><span class="line"><span class="symbol">  medium:</span> <span class="keyword">/images/</span>favicon.png</span><br><span class="line"><span class="symbol">  apple_touch_icon:</span> <span class="keyword">/images/</span>favicon.png</span><br><span class="line"><span class="symbol">  safari_pinned_tab:</span> <span class="keyword">/images/</span>favicon.png</span><br></pre></td></tr></table></figure>

<p>&#x2F;images&#x2F;favicon.png指的是themes目录下public&#x2F;images&#x2F;下的图片</p>
<h3 id="21、侧边栏社交链接"><a href="#21、侧边栏社交链接" class="headerlink" title="21、侧边栏社交链接"></a>21、侧边栏社交链接</h3><p>修改主题配置文件中socail选项：</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">social:</span></span><br><span class="line"><span class="symbol">  GitHub:</span> https:<span class="comment">//github.com/yuumiy || fab fa-github</span></span><br><span class="line">  E-Mail: mailto:<span class="number">115274737</span>@qq.com || fa fa-envelope</span><br><span class="line"><span class="symbol">  CSDN:</span> https:<span class="comment">//blog.csdn.net/qq_44752641 || fab fa-telegram</span></span><br><span class="line"><span class="symbol">  RSS:</span> /atom.xml || fas fa-rss</span><br></pre></td></tr></table></figure>

<h3 id="22、阅读全文按钮样式"><a href="#22、阅读全文按钮样式" class="headerlink" title="22、阅读全文按钮样式"></a>22、阅读全文按钮样式</h3><p>在博客需要显示摘要的地方加上标签，</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<p>就不会显示全文。</p>
<h3 id="23、更改新建文章的模板"><a href="#23、更改新建文章的模板" class="headerlink" title="23、更改新建文章的模板"></a>23、更改新建文章的模板</h3><p>默认新建文章没有分类这个选项，需要自己填写，现在修改 hexo&#x2F;scaffolds&#x2F;post.md 文件 。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125;</span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125;</span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure>

<h3 id="24、设定代码高亮格式"><a href="#24、设定代码高亮格式" class="headerlink" title="24、设定代码高亮格式"></a>24、设定代码高亮格式</h3><p>在站点的配置文件中，搜索highlight</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">highlight:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">tab_replace:</span></span><br></pre></td></tr></table></figure>

<p>主题配置有关于代码高亮样式的选择，搜索highlight，一般选择normal即可</p>
<h3 id="25、代码块复制选项"><a href="#25、代码块复制选项" class="headerlink" title="25、代码块复制选项"></a>25、代码块复制选项</h3><p>主题配置文件搜索copy_button：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">copy_button:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="26、添加萌萌哒Live2D模型"><a href="#26、添加萌萌哒Live2D模型" class="headerlink" title="26、添加萌萌哒Live2D模型"></a>26、添加萌萌哒Live2D模型</h3><p>安装插件</p>
<figure class="highlight ada"><table><tr><td class="code"><pre><span class="line">npm install <span class="comment">--save hexo-helper-live2d</span></span><br></pre></td></tr></table></figure>

<p>在站点配置文件中添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-koharu</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">right</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">react:</span></span><br><span class="line">    <span class="attr">opacity:</span> <span class="number">0.7</span></span><br></pre></td></tr></table></figure>

<p>我使用的是喵咪的模型，使用以下命令下载组件，如需使用别的看板娘，请自行百度搜索</p>
<figure class="highlight cmake"><table><tr><td class="code"><pre><span class="line">npm <span class="keyword">install</span> live2d-widget-model-koharu</span><br></pre></td></tr></table></figure>

<ul>
<li><p>在Hexo根目录中新建文件夹live2d_models</p>
</li>
<li><p>在 node_modules 文件夹中找到刚刚下载的 live2d 模型，将其复制到 live2d_models 中。live2d 模型是一个类似于这样的文件夹：live2d-widget-model-koharu</p>
</li>
<li><p>更新站点配置文件中model.use项，将其修改为 live2d_models 文件夹中的模型文件夹的名称</p>
<h3 id="27、开启Valine评论系统"><a href="#27、开启Valine评论系统" class="headerlink" title="27、开启Valine评论系统"></a>27、开启Valine评论系统</h3><p>注册 Leancloud 账号，注册完成后进入app控制面板-&gt;创建应用-&gt;创建开发版应用。</p>
<p><img data-src="/posts/68d0/image-20221020095952891.png" alt="image-20221020095952891"></p>
</li>
</ul>
<p>接下来我们配置一下我们的leancloud。点击设置-&gt;安全中心-&gt;Web 安全域名，输入你的博客网址来保证其他人就算获取了你的appid也没办法操作你的数据库。<img data-src="/posts/68d0/image-20221020100054780.png" alt="image-20221020100054780"></p>
<p>接下来点击应用凭证获取你的appid和appkey。</p>
<p><img data-src="/posts/68d0/image-20221020100119280.png" alt="image-20221020100119280"></p>
<hr>
<p>打开主题配置文件，找到comments栏目并开启valine。</p>
<figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">comments:</span></span><br><span class="line"><span class="symbol">  active:</span> valine</span><br></pre></td></tr></table></figure>

<p>往下滑动进入valine设置栏，开启valine并填入你的appid和appkey。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">作者看到就会及时反馈，欢迎评论哦(๑•̀ㅂ•́)و✧</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">retro</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">true</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>

<p>这里稍微解释一下各个参数的用途。<br>placeholder是在用户未输入任何参数时默认显示的值；avatar是默认用户头像，参考<a href="https://valine.js.org/avatar.html">link</a>；meta是可以选择的用户信息栏。</p>
<p>为了让Valine更加简洁，我们可以自定义Valine的显示，我是去除了Valine的power by、svg标签、下方的评论提示。具体做法是修改source&#x2F;_data&#x2F;styles.styl:</p>
<figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐藏 valine 的 powered by</span></span><br><span class="line"><span class="selector-class">.vpower</span><span class="selector-class">.txt-right</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 隐藏 valine 的 svg标签</span></span><br><span class="line"><span class="selector-class">.markdown</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 隐藏 valine 的 下方评论提示</span></span><br><span class="line"><span class="selector-class">.vempty</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: none<span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>至此你的评论系统已经开启。</p>
</blockquote>
<h3 id="28、添加对表情符号的支持"><a href="#28、添加对表情符号的支持" class="headerlink" title="28、添加对表情符号的支持"></a>28、添加对表情符号的支持</h3><p>安装</p>
<figure class="highlight arcade"><table><tr><td class="code"><pre><span class="line">npm install hexo-<span class="built_in">filter</span>-emoji</span><br></pre></td></tr></table></figure>

<p>在站点配置文件添加：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 为博客添加emoji表情支持</span></span><br><span class="line"><span class="attr">emoji:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">className:</span> <span class="string">github-emoji</span></span><br><span class="line">  <span class="attr">styles:</span> </span><br><span class="line">  <span class="attr">customEmojis:</span> </span><br></pre></td></tr></table></figure>

<h3 id="29、文章加密"><a href="#29、文章加密" class="headerlink" title="29、文章加密"></a>29、文章加密</h3><p>在需要加密的文章 Front matter 区域设置 password: 123456</p>
<p>主题配置文件取消注释</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">custom_file_path:</span><br><span class="line">  <span class="built_in">head</span>: <span class="built_in">source</span>/_data/head.swig</span><br></pre></td></tr></table></figure>

<p>在路径 &#x2F;source&#x2F;_data 下创建&#x2F;修改 head.swig文件，并添加以下内容</p>
<figure class="highlight handlebars"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(<span class="string">&#x27;</span></span></span><span class="template-variable">&#123;&#123; <span class="name">page.password</span> &#125;&#125;</span><span class="language-xml">&#x27;)&#123;</span></span><br><span class="line"><span class="language-xml">            if (prompt(&#x27;请输入文章密码&#x27;) !== &#x27;</span><span class="template-variable">&#123;&#123; <span class="name">page.password</span> &#125;&#125;</span><span class="language-xml">&#x27;)&#123;</span></span><br><span class="line"><span class="language-xml">                alert(&#x27;密码错误！&#x27;);</span></span><br><span class="line"><span class="language-xml">                history.back();</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;)();</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<h1 id="第三部分-一些问题"><a href="#第三部分-一些问题" class="headerlink" title="第三部分 一些问题"></a>第三部分 一些问题</h1><h2 id="中文乱码"><a href="#中文乱码" class="headerlink" title="中文乱码"></a>中文乱码</h2><p>​       首先，把编辑器全局yaml和主题yaml的Unicode编码设置为UTF-8，</p>
<p>其次，如果每次用vscode都要给重置为GB编码，则不用vscode打开，用</p>
<p>记事本打开。</p>
<hr>
<h2 id="端口占用"><a href="#端口占用" class="headerlink" title="端口占用"></a>端口占用</h2><p>在全局yaml中加入</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">//端口号任改，我改为4001</span></span><br><span class="line">  <span class="attr">compress:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">header:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="背景重载"><a href="#背景重载" class="headerlink" title="背景重载"></a>背景重载</h2><p>在配置主题背景的时候，每次提交都会还原删除的图片，则试试把根目录下&#x2F;public&#x2F;images&#x2F;的不用图片和把themes目录下&#x2F;source&#x2F;images&#x2F;不用的图片<code>同时删除</code>！</p>
<hr>
<h2 id="连接问题"><a href="#连接问题" class="headerlink" title="连接问题"></a>连接问题</h2><p><img data-src="/posts/68d0/image-20221020100135912.png" alt="image-20221020100135912"></p>
<p>出现这种情况需要打开或者关闭vpn，不断更换网络试试，只是因为网络的原因，要多试几次。</p>
<hr>
<h2 id="工具包重复安装问题"><a href="#工具包重复安装问题" class="headerlink" title="工具包重复安装问题"></a>工具包重复安装问题</h2><p>每次删除blog文件之后，都需要安装对应的工具和依赖，不能少输指令</p>
<hr>
<h2 id="图片插入的问题"><a href="#图片插入的问题" class="headerlink" title="图片插入的问题"></a>图片插入的问题</h2><h3 id="一、现象"><a href="#一、现象" class="headerlink" title="一、现象"></a>一、现象</h3><p>在markdown中写入的图片是无法在hexo网页上正常部署的，需要修改一些路径才可以网页观看。</p>
<h3 id="二、第一步修改配置文件"><a href="#二、第一步修改配置文件" class="headerlink" title="二、第一步修改配置文件"></a>二、第一步修改配置文件</h3><p>首先将全局配置文件中的<code>post_asset_folder</code> 选项设为 <code>true</code> 来打开。该操作的作用就是在使用<code>hexo new xxx</code>指令新建博文时，在相同路径下同步创建一个<code>xxx</code>文件夹，而<code>xxx</code>文件夹的作用就是用来存放图片资源；</p>
<p>然后修改markdown偏好设置图像<img data-src="/posts/68d0/image-20221020100453791.png" alt="image-20221020100453791"></p>
<p>这部的意义是将粘贴到markdown的图片自动放在上一步的同步创建的文件夹中，不用我们手动放入</p>
<h3 id="三、第三步下载插件"><a href="#三、第三步下载插件" class="headerlink" title="三、第三步下载插件"></a>三、第三步下载插件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install https://github.com/CodeFalling/hexo-asset-image --save</span><br></pre></td></tr></table></figure>

<p>插件的作用是用于<strong>路径转换</strong>：根据md图片的相对路径，给出html中图片的绝对路径。因为hexo g的时候，我们md的路径会被转化为html的路径，使用插件帮助我们正确的给出html路径。</p>
<h3 id="四、修改粘贴方法"><a href="#四、修改粘贴方法" class="headerlink" title="四、修改粘贴方法"></a>四、修改粘贴方法</h3><p><img data-src="/posts/68d0/image-20221020101035305.png" alt="image-20221020101035305"></p>
<p>一般粘贴图片都是这样，但是我们需要删除其中的test&#x2F;。</p>
<p>所以我们应该写为</p>
<p><img data-src="/posts/68d0/image-20221020101129157.png" alt="image-20221020101129157"></p>
<p>但是这样不能在markdown中正常显示，没办法就是有点冲突。</p>
<p>参考资料:<a href="https://blog.csdn.net/m0_43401436/article/details/107191688">hexo博客中插入图片失败—CSDN博客</a></p>
]]></content>
      <categories>
        <category>工具</category>
        <category>博客</category>
      </categories>
      <tags>
        <tag>工具</tag>
        <tag>more</tag>
        <tag>blog</tag>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>概率论</title>
    <url>/posts/a5e0.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>快捷键大全</title>
    <url>/posts/cb7d.html</url>
    <content><![CDATA[<h1 id="快捷键大全"><a href="#快捷键大全" class="headerlink" title="快捷键大全"></a>快捷键大全</h1><span id="more"></span>

<h1 id="PS快捷键"><a href="#PS快捷键" class="headerlink" title="PS快捷键"></a>PS快捷键</h1><h1 id="Linux快捷键"><a href="#Linux快捷键" class="headerlink" title="Linux快捷键"></a>Linux快捷键</h1><h2 id="自动补全指令"><a href="#自动补全指令" class="headerlink" title="自动补全指令"></a>自动补全指令</h2><ul>
<li>TAB</li>
</ul>
<h2 id="清空光标前输入"><a href="#清空光标前输入" class="headerlink" title="清空光标前输入"></a>清空光标前输入</h2><ul>
<li>ctrl-u</li>
</ul>
<h2 id="清空光标后输入"><a href="#清空光标后输入" class="headerlink" title="清空光标后输入"></a>清空光标后输入</h2><ul>
<li>ctrl-k</li>
</ul>
<h2 id="移动光标到首行"><a href="#移动光标到首行" class="headerlink" title="移动光标到首行"></a>移动光标到首行</h2><ul>
<li>ctrl-a</li>
</ul>
<h2 id="移动光标到尾行"><a href="#移动光标到尾行" class="headerlink" title="移动光标到尾行"></a>移动光标到尾行</h2><ul>
<li>ctrl-e</li>
</ul>
<h2 id="清屏"><a href="#清屏" class="headerlink" title="清屏"></a>清屏</h2><ul>
<li>ctrl-l</li>
</ul>
<h2 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h2><ul>
<li>ctrl+insert</li>
</ul>
<h2 id="粘贴"><a href="#粘贴" class="headerlink" title="粘贴"></a>粘贴</h2><ul>
<li>shift+insert</li>
</ul>
<h2 id="回滚指令"><a href="#回滚指令" class="headerlink" title="回滚指令"></a>回滚指令</h2><ul>
<li>↑↓</li>
</ul>
<h1 id="Bilibili快捷键"><a href="#Bilibili快捷键" class="headerlink" title="Bilibili快捷键"></a>Bilibili快捷键</h1><h2 id="弹幕开关"><a href="#弹幕开关" class="headerlink" title="弹幕开关"></a>弹幕开关</h2><ul>
<li>D</li>
</ul>
<h2 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h2><ul>
<li>F</li>
</ul>
<h1 id="网页快捷键"><a href="#网页快捷键" class="headerlink" title="网页快捷键"></a>网页快捷键</h1><ul>
<li>ctrl+T		创建网页</li>
<li>ctrl+W		关闭网页</li>
<li>F11         全屏</li>
</ul>
<h1 id="vscode快捷键"><a href="#vscode快捷键" class="headerlink" title="vscode快捷键"></a>vscode快捷键</h1><h1 id="MarkDown快捷键"><a href="#MarkDown快捷键" class="headerlink" title="MarkDown快捷键"></a>MarkDown快捷键</h1><h2 id="加粗"><a href="#加粗" class="headerlink" title="加粗"></a>加粗</h2><ul>
<li>ctrl+B</li>
</ul>
<h2 id="斜体"><a href="#斜体" class="headerlink" title="斜体"></a>斜体</h2><ul>
<li>ctrl+L</li>
</ul>
<h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><ul>
<li>ctrl+U</li>
</ul>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><ul>
<li>ctrl+shift+&#96;</li>
</ul>
<h2 id="删除线"><a href="#删除线" class="headerlink" title="删除线"></a>删除线</h2><ul>
<li>alt+ctrl+5</li>
</ul>
<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><ul>
<li>ctrl+num</li>
</ul>
<h2 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h2><ul>
<li>ctrl+shift+K</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>ctrl+shift+[   有序列表</li>
<li>ctrl+shift+]   无序列表</li>
</ul>
<h1 id="Idea快捷键"><a href="#Idea快捷键" class="headerlink" title="Idea快捷键"></a>Idea快捷键</h1><h2 id="查看继承关系"><a href="#查看继承关系" class="headerlink" title="查看继承关系"></a>查看继承关系</h2><ul>
<li>ctrl+H</li>
</ul>
<h2 id="复制一行"><a href="#复制一行" class="headerlink" title="复制一行"></a>复制一行</h2><ul>
<li>鼠标下键</li>
</ul>
<h2 id="自动布局"><a href="#自动布局" class="headerlink" title="自动布局"></a>自动布局</h2><ul>
<li>ctrl+Q</li>
</ul>
<h2 id="生成构造器"><a href="#生成构造器" class="headerlink" title="生成构造器"></a>生成构造器</h2><ul>
<li>alt + insert</li>
</ul>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><h3 id="主方法"><a href="#主方法" class="headerlink" title="主方法"></a>主方法</h3><ul>
<li>main</li>
</ul>
<h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul>
<li>sout</li>
</ul>
<p>循环</p>
<ul>
<li>fori</li>
</ul>
<h1 id="通用快捷键"><a href="#通用快捷键" class="headerlink" title="通用快捷键"></a>通用快捷键</h1><h2 id="查找单词"><a href="#查找单词" class="headerlink" title="查找单词"></a>查找单词</h2><ul>
<li>ctrl+F</li>
</ul>
<h2 id="全选文章"><a href="#全选文章" class="headerlink" title="全选文章"></a>全选文章</h2><ul>
<li>ctrl+A</li>
</ul>
<h2 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h2><ul>
<li>ctrl+Z</li>
</ul>
<h2 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h2><ul>
<li>ctrl+W</li>
</ul>
<h2 id="保存"><a href="#保存" class="headerlink" title="保存"></a>保存</h2><ul>
<li>ctrl+S</li>
</ul>
]]></content>
      <categories>
        <category>技巧</category>
      </categories>
      <tags>
        <tag>操作</tag>
        <tag>快捷键</tag>
      </tags>
  </entry>
</search>
